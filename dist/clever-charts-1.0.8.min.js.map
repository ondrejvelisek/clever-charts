{"version":3,"file":"clever-charts-1.0.8.min.js","sources":["../src/utils/Observable.js","../src/doughnut/DoughnutDefaults.js","../src/doughnut/DoughnutRenderer.js","../src/doughnut/Doughnut.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/utils/PositionUtils.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/histogram/Histogram.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/line/Line.js","../src/bar/BarDefaults.js","../src/bar/BarData.js","../src/bar/BarRenderer.js","../src/bar/Bar.js","../src/barchart/defaults/BarchartDefaults.js","../src/barchart/components/Component.js","../src/barchart/components/Tooltip.js","../src/barchart/components/Details.js","../src/barchart/components/Stripe.js","../src/barchart/components/Hover.js","../src/barchart/data/TooltipData.js","../src/barchart/components/Bar.js","../src/barchart/components/Barchart.js","../src/barchart/data/StripeData.js","../src/barchart/data/BarData.js","../src/barchart/data/DetailsData.js","../src/barchart/data/BarchartData.js","../src/barchart/components/BarchartBackport.js","../src/CleverCharts.js"],"sourcesContent":["/**\n * @class\n * Observable class, handles binding and firing events\n * @param {Array} events list of events for this observable\n */\nexport default class Observable {\n    /**\n     * @param {Array} events\n     */\n    constructor(events = []) {\n        // create a map of handlers where each event has an array of bound handlers\n        this._handlers = events.reduce((acc, cur)=>{\n            acc[cur] = [];\n            return acc;\n        },{});\n    }\n\n\t/**\n\t * @public\n\t * Bind event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t */\n    on(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tthis._handlers[event].push(handler);\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Unbind event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler, optional\n\t */\n    off(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tif (!handler) {\n\t\t\tthis._handlers[event] = [];\n\t\t} else {\n\t\t\tvar handlers = this._handlers[event];\n\t\t\tvar index = handlers.indexOf(handler);\n\t\t\tif (index != -1){\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Add new event to be handled\n\t * @param {String} event\n\t */\n\tadd(event) {\n\t\tif (!(event in this._handlers)) {\n\t\t\tthis._handlers[event] = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Fire widget event\n\t * @param {String} event event name\n\t * @param {*} ...args event arguments\n\t */\n\tfire(event, ...args) {\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tvar handlers = this._handlers[event];\n\t\tfor (var i = 0; i < handlers.length; i++) {\n\t\t\thandlers[i].apply(this, args);\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Destorys this observable, removes events and so on \n\t */\n\tdestroy() {\n\t\tthis._handlers = null;\n\t\treturn this;\n    }\n\t\n}","/**\n * @public\n * Default outer radius\n */\nexport const OUTER_RADIUS = 10;\n\n/**\n * @public\n * Default inner radius\n */\nexport const INNER_RADIUS = 10;\n\n/**\n * @public\n * Default value\n */\nexport const VALUE = 0;\n\n/**\n * @public\n * Default active color\n */\nexport const ACTIVE_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Default inactive color\n */\nexport const INACTIVE_COLOR = \"#F0F0F0\";\n\n/**\n * @public\n * Default background color\n */\nexport const BACKGROUND_COLOR = \"transparent\";\n\n/**\n * @public\n * Default animation duration\n */\nexport const ANIMATION_DURATION = 250;","import style from \"./Doughnut.css\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n\n/**\n * @class\n * Doughnut renderer class\n * @param {Object} options\n */\nexport default class DoughnutRenderer {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Doughnut options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Doughnut has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\t\t\n\t}\n\n\t/**\n\t * @public\n\t * Returns whether Doughnut has been rendered or not\n\t * @returns {boolean} true if Doughnut has been rendered\n\t */\n\tisRendered() {\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._containerEl.node().offsetWidth;\n\t\tvar height = this._containerEl.node().offsetHeight;\n\t\tvar value = this._value = this._options.value;\n\t\tvar angle = this._angle = value / 100 * tau;\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\n\n\t\t// arc settings\n\t\tvar arc = this._arc = d3.arc()\n\t\t\t.innerRadius(innerRadius)\n\t\t\t.outerRadius(outerRadius)\n\t\t\t.startAngle(0);\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", style[\"svg\"]);\n\n\t\t// render group\n\t\tvar g = this._groupEl = this._svgEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"class\", style[\"doughnut\"])\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\n\n\t\t// render inactive doughtnut\t\n\t\tthis._inactiveArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: tau })\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render active doughtnut\t\n\t\tthis._activeArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: angle })\n\t\t\t.attr(\"fill\", this._options.activeColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// hover element, this needs to be rendered in order to have stable and animation\n\t\t// independent hover \n\t\tthis._hoverEl = g.append(\"rect\")\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", -width/2)\n\t\t\t.attr(\"y\", -height/2)\n\t\t\t.attr(\"width\",width)\n\t\t\t.attr(\"height\",height)\n\n\t\tg.on(\"mouseover\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\");\n\t\t})\n\n\t\tg.on(\"mouseout\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\");\n\t\t})\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t\t * Bind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} handler event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\ton(eventName, handler) {\n\t\t\tthis._observable.on(eventName, handler);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Unbind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} [handler] event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\toff(eventName, handler) {\n\t\t\tthis._observable.off(eventName, handler);\n\t\t\treturn this;\n\t\t}\t\n\t\n\n\t/**\n\t * @public\n\t * @param {opts} new options\n\t * Updates doughnut with new options\n\t */\n\tupdate(opts) {\n\t\tvar options = opts || {};\n\n\t\tif (typeof options.value == \"undefined\"){\n\t\t\toptions.value = this._value;\n\t\t} else {\n\t\t\tthis._value = options.value;\n\t\t}\n\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \n\t\tvar activeArcTransition = this._activeArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\n\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\n\t\tthis._inactiveArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._arc({ endAngle: tau });\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis._backgroundArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"r\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._innerRadius;\n\t\t\t\t}\n\t\t\t});\n\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\n\t\t\tthis._options.activeColor = options.activeColor;\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {options} new options\n\t * returns tween function for arc \n\t */\n\t_arcTween(options) {\n\t\tvar angle = options.value / 100 * tau;\n\t\t// change angle if new value is provided \n\t\tif (typeof options.value != \"undefined\") {\n\t\t\tangle = options.value / 100 * tau;\n\t\t}\n\n\t\t// handle new radiuses\n\t\tvar innerRadius = this._innerRadius;\n\t\tvar outerRadius = this._outerRadius;\n\n\t\tif (typeof options.innerRadius != \"undefined\") {\n\t\t\tinnerRadius = options.innerRadius;\n\t\t}\n\n\t\tif (typeof options.outerRadius != \"undefined\") {\n\t\t\touterRadius = options.outerRadius;\n\t\t}\n\n\t\t// get interpolation fns between new radiuses and old ones\n\t\t// for simlicity, do this even if value doesn't change as we\n\t\t// likely generate new path anyway\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\n\n\t\treturn (d) => {\n\t\t\t// get angle interpolation fn \n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\n\n\t\t\treturn (t) => {\n\t\t\t\t// on each cycle, set new radiuses and endAngle\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\n\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\n\t\t\t\treturn this._arc(d);\n\t\t\t};\n\t\t};\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Doughnut UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered) {\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n\t}\n\n}","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 150;\n\n/**\n * @public\n * Default widget margin\n */\nexport const MARGIN = {\n    top:0,\n    left:5,\n    right:5,\n    bottom:15\n};\n\n/**\n * Default label margin from x axis\n */\nexport const LABEL_MARGIN = 7;\n\n/**\n * @public\n * Default inactive bar color\n */\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\n\n/**\n * @public\n * Default inactive bar opacity\n */\nexport const INACTIVE_BAR_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\n\n/**\n * @public\n * Default over selection opacity\n */\nexport const OVER_SELECTION_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const SELECTION_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Enable selection toggle\n */\nexport const ENABLE_SELECTION_TOGGLE = true;\n\n/**\n * @public\n * Default font size\n */\nexport const FONT_SIZE = 11;\n\n/**\n * @public\n * Default colors \n */\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\n\n/**\n * @public\n * Default width of active handle area\n */\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar minMax = this.getMinMax();\n\t\t// return min if position is 0\n\t\tif (position === 0){\n\t\t\treturn minMax.min;\n\t\t}\n\n\t\t// return max if position is at the end\n\t\tif (position === this._options.width){\n\t\t\treturn minMax.max;\n\t\t}\n\n\t\t// else calculate based on value ratio and min/max\n\t\tvar valueRatio = this.getValueRatio();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\n\t\t\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\t// support array as well as single values\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\n\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","import * as d3 from \"d3\";\nimport style from \"../Histogram.css\";\nimport * as Defaults from \"../HistogramDefaults\";\nimport Observable from \"../../utils/Observable\";\n\n/**\n * Gradient index shared for all instances\n */\nvar gradientIndex = 0;\n\n/**\n * @class\n * HistogramHandle representing control handle for histogram\n */\nexport default class HistogramHandle {\n\t/**\n\t * @param {D3Selection} groupEl\n\t * @param {Number} value\n\t * @param {Number} index\n\t * @param {HistoryData} histogramData\n\t * @param {Object} options\n\t */\n\tconstructor(groupEl, value, index, histogramData, options) {\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"drag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle starts\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"startDrag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle ends\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"endDrag\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * handle element\n\t\t */\n\t\tthis._handleEl = null;\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * handle line element\n\t\t */\n\t\tthis._handleLineEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle circle element\n\t\t */\n\t\tthis._handleCircleEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask element\n\t\t */\n\t\tthis._handleMaskEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask gradient element\n\t\t */\n\t\tthis._handleMaskGradientEl = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * handle label element\n\t\t */\n\t\tthis._handleLabelEl = null;\t\t\n\n\t\t/**\n\t\t * @private \n\t\t * True if handle is over\n\t\t */\n\t\tthis._isOver = false;\n\t\t\n\t\t/**\n\t\t * @private \n\t\t * Main group element\n\t\t */\t\t\n\t\tthis._groupEl = groupEl;\n\t\t/**\n\t\t * @private \n\t\t * handle index\n\t\t */\t\t\n\t\tthis._index = index;\n\t\t/**\n\t\t * @private \n\t\t * handle value\n\t\t */\t\t\n\t\tthis._value = value;\n\t\t/**\n\t\t * @private \n\t\t * initial handle value\n\t\t */\t\t\n\t\tthis._initialValue = new Number(value);\t\t\n\t\t/**\n\t\t * @private \n\t\t * handle position\n\t\t */\t\t\n\t\tthis._position = histogramData.valueToPosition(value);\n\t\t/**\n\t\t * @private \n\t\t * initial handle position\n\t\t */\t\t\n\t\tthis._initialPosition = new Number(this._position);\n\t\t/**\n\t\t * @private \n\t\t * bar options\n\t\t */\t\t\n\t\tthis._options = options;\n\t\t/**\n\t\t * @private \n\t\t * histogram data\n\t\t */\t\t\n\t\tthis._histogramData = histogramData;\n\t\t/**\n\t\t * @private \n\t\t * Cache for storing label size, enhances performance when animating\n\t\t */\t\t\n\t\tthis._labelSizeCache = {};\n\n\t\t/**\n\t\t * @private \n\t\t * elements\n\t\t */\t\t\n\t\tthis._elements = [];\t\t\n\t\t\n\t\tthis._renderHandle();\n\t}\n\n\t/**\n\t * @public\n\t * Destroys this handle\n\t */\n\tdestroy(){\n\t\tthis._elements.forEach(element=>element.remove());\n\t\tthis._elements = [];\n\t}\n\n\t/**\n\t * @private\n\t   * Renders drag handle\n\t   */\n\t_renderHandle() {\n\t\tthis._elements = [\n\t\t\tthis._createHandleElement(),\n\t\t\tthis._createHandleLineElement(),\n\t\t\tthis._createHandleCircleElement(),\n\t\t\tthis._createDragMaskElement(),\n\t\t\tthis._createMaskGradientElement(),\n\t\t\tthis._createDragLabelElement()\n\t\t];\n\n\t\tthis._handleHoverState();\n\t\tthis._handleDrag();\n\t}\t\n\n\thide(){\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Returns X position of this handle\n\t * @returns {Number} X position handle\n\t */\n\tgetXPosition() {\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\n\t}\n\n\t/**\n\t * @public\n\t * Sets hover state\n\t */\n\tsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\t\n\t/**\n\t * @public \n\t * @returns {SVGRect} \n\t * Returns drag label box for this handle\n\t */\n\tgetLabelBox(){\n\t\treturn this._handleLabelEl.node().getBBox();\n\t}\n\n\t/**\n\t * @public \n\t * Shifts handle label by given offset so it can handle label position conflicts\n\t */\n\tsetLabelOffset(offset){\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\n\t/**\n\t * @public \n\t * Sets handle position\n\t */\n\tsetHandleXPosition(position){\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\n\t\treturn this;\n\t}\n\n\tsetLabelText(text){\n\t\tthis._handleLabelEl.text(text);\n\t\treturn this;\n\t}\n\n\tshowLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\treturn this;\n\t}\n\n\thideLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\treturn this;\n\t}\t\n\n\tsetLabelPosition(position){\n\t\tthis.setLabelOffset(0);\n\t\tthis._updateLabelPosition(position);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Unsets hover state\n\t */\n\tunsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\n\t}\n\n\t/**\n\t * @public\n\t * Enables this handle \n\t */\n\tenable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\n\t}\n\n\t/**\n\t * @public\n\t * Disables this handle \n\t */\n\tdisable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\n\t}\n\n\t/**\n\t * @private\n\t * Handle hover state\n\t */\n\t_handleHoverState(){\n\t\t// line hover effect\n\t\tthis._handleEl.on(\"mouseover\", () => {\n\t\t\tthis._isOver = true;\n\t\t\tthis.setHoverState();\n\t\t})\n\t\tthis._handleEl.on(\"mouseout\", () => {\n\t\t\tthis._isOver = false;\n\t\t\tthis.unsetHoverState();\n\t\t})\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens when drag starts\n\t */\n\t_onStartDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\n\t\tthis._observable.fire(\"startDrag\", this);\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens on drag\n\t */\n\t_onDrag(){\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\n\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\n\n\t\tthis.setHoverState();\n\n\t\tthis._position = xpos;\n\n\t\t// prevent recalculating value for the same position\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\n\t\t} else {\n\t\t\tthis._value = this._initialValue;\n\t\t}\n\n\t\tthis._handleLabelEl.text(this._getLabelText())\n\n\t\tthis._updateLabelPosition(xpos);\n\t\tthis._observable.fire(\"drag\");\t\t\n\t}\n\n\t_getLabelText() {\n\t\treturn this._options.format(this._value);\n\t}\n\t/**\n\t * @private\n\t * handles what happens when drag ends\n\t */\n\t_onEndDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\n\t\tif (!this._isOver) {\n\t\t\tthis.unsetHoverState();\n\t\t}\n\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\n\t}\n\n\t/**\n\t * @private\n\t * Handles handle drag \n\t */\n\t_handleDrag(){\n\t\tthis._handleEl.call(d3.drag()\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\n\t}\n\t/**\n\t * @private\n\t * Return computed or stored label length\n\t * @param {SVGElement}\n\t * @param {Number} length \n\t */\n\t_getComputedLabelTextLength(label){\n\t\tvar content = label.innerHTML;\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\n\t\treturn this._labelSizeCache[content];\n\t}\n\n\t/**\n\t * @private\n\t * Updates label position\n\t * @param {Number} position \n\t */\n\t_updateLabelPosition(position) {\n\t\tvar label = this._handleLabelEl.node();\n\t\tvar maskPadding = this._options.fontSize;\t\t\n\n\t\t// we need to calculate text length so we can create mask and center text\n\t\tvar textLength = this._getComputedLabelTextLength(label);\n\t\tvar maskWidth = textLength + maskPadding * 2;\n\t\tvar xPosition = position - textLength / 2;\n\n\t\t// handle when dragging towards left side\n\t\tif (xPosition < 0) {\n\t\t\txPosition = 0;\n\t\t}\n\n\t\t// handle when dragging towards right side\n\t\tif (xPosition + textLength > this._options.width) {\n\t\t\txPosition = this._options.width  - textLength;\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\n\t\t} else {\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\n\t\t}\n\n\t\t// position mask\n\t\tthis._handleMaskEl.attr(\"x\", () => {\n\t\t\treturn parseInt(xPosition) - maskPadding;\n\t\t});\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\n\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\n\t}\n\t\t\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders main handle element \n\t * @returns {SVGElement}\n\t */\n\t_createHandleElement(){\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"data-handle-index\", this._index)\n\t\t\t.attr(\"data-handle-value\", this._value)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\n\t\t\t.attr(\"height\", this._options.height + 5)\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\n\t\treturn this._handleEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders handle line element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleLineElement(){\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\n\t\t\t.attr(\"width\", 4)\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"x\", this._position - 2);\n\n\t\treturn this._handleLineEl;\n\t}\t\n\n\t/**\n\t * @private \n\t * Renders handle circle element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleCircleElement(){\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\n\t\t\t.attr(\"fill\", \"#ffffff\")\n\t\t\t.attr(\"fill-opacity\", 1)\n\t\t\t.attr(\"stroke\", \"#000\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"r\", 3.5);\n\n\t\treturn this._handleCircleEl;\n\t}\t\t\n\n\t/**\n\t * @private \n\t * Renders drag mask element \n\t * @returns {SVGElement} \n\t */\n\t_createDragMaskElement(){\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\n\t\t\t.attr(\"display\", \"none\");\t\t\t\n\n\t\treturn this._handleMaskEl;\n\t}\n\t\n\t/**\n\t * @private \n\t * Renders handle label element \n\t * @returns {SVGElement}  \n\t */\n\t_createDragLabelElement(){\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height;\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\n\t\t\t.attr(\"class\", style[\"drag-label\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.text(() => {\n\t\t\t\tvar formattedValue = format(this._initialValue);\n\t\t\t\treturn formattedValue;\n\t\t\t})\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\n\n\t\t\n\t\tthis._updateLabelPosition(this._position);\n\t\treturn this._handleLabelEl;\n\t}\n}","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import style from \"../Histogram.css\";\nimport HistogramHandle from \"./HistogramHandle\";\nimport Observable from \"../../utils/Observable\";\nimport * as PositionUtils from \"../utils/PositionUtils\"\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramSelectionRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._histogramData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * history selection\n\t\t */\n\t\tthis._histogramSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * index of over selection  \n\t\t */\n\t\tthis._overSelectionIndex = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * selection handles\n\t\t */\n\t\tthis._handles = [];\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * true if handle is dragged\n\t\t */\n\t\tthis._draggingHandle = false;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous selection for animation\n\t\t */\n\t\tthis._prevSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * true if animation is run\n\t\t */\n\t\tthis._animating = false;\n\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * @param {DOMElement}  \n\t * @returns {HistogramSelectionRenderer} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._rendered = true;\n\t\tthis._groupEl = groupEl\n\n\t\treturn this;\n\t} \t\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._destroyHandles();\n\t\tif (this._selectionBars){\n\t\t\tthis._selectionBars.remove();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Destroys selection controls \n\t */\n\t_destroyHandles(){\n\t\tthis._handles.forEach(handle=>handle.destroy());\n\t\tthis._handles = [];\n\t}\n\n\t/**\n\t * @private\n\t * Handles click on handle\n\t * @param {Number} handleIndex\n\t * @param {Number} handleValue \n\t */\n\t_onHandleClick(handleIndex, handleValue){\n\t\t// call prompt handler if available\n\t\tif (this._options.promptHandler){\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\n\t\t\t\tpromptResult = parseFloat(promptResult);\n\t\t\t\t// must be within min max range\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\n\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\n\t\t\t\tpoints[handleIndex] = {\n\t\t\t\t\tvalue:promptResult\n\t\t\t\t};\n\n\t\t\t\tvar positions = points\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\n\t\t\t\t\n\t\t\t\tthis._updateSelectionPositions(positions, points);\n\t\t\t\tthis._updateSelection();\n\n\t\t\t\t// TODO: update handles without destroying them\n\t\t\t\tthis._destroyHandles();\n\t\t\t\tthis._renderHandles();\n\n\t\t\t\t// fire selection change if selection is changed\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t}\n\n\t/**\n\t * @private\n\t * Toggles selection\n\t * @param {Number} selectionIndex \n\t */\n\t_toggleSelection(selectionIndex){\n\t\tvar selection = this._options.selection[selectionIndex];\n\t\tselection.disabled = !selection.disabled;\n\t\tvar enabled = !selection.disabled;\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t}\t\n\n\t/**\n\t * @private\n\t * Handles click on chart\n\t */\n\t_onClick(){\n\t\tvar target = d3.select(d3.event.target);\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\n\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\n\t\t\tthis._toggleSelection(selectionIndex)\n\t\t} else if (handleIndex != null){\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * Handles handle click \n\t */\n\t_handleClick(){\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\n\t\t}\n\n\t\tif (this._animate && this._histogramData){\n\t\t\tthis._prevHistogramData = this._histogramData;\n\t\t}\n\n\t\tthis._histogramData = histogramData;\n\t\tthis._histogramSelection = histogramSelection;\n\t\t\n\t\tthis._clear();\n\t\tthis._renderSelection();\n\t\tthis._updateSelection();\n\n\t\tthis._handleHoverState();\n\t\tthis._handleClick();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * Updates selection controls on hover\n\t * @param {Number} selectionIndex \n\t */\n\t_updateSelectionControlsHoverState(selectionIndex){\n\t\t// get all handles sorted by X position\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\n\t\t});\n\n\t\t// unset hover state on all handles\n\t\thandles.forEach(handle=>handle.unsetHoverState());\n\n\t\t// selection is active, active both handles for active selection\n\t\tif (selectionIndex != null){\n\t\t\tvar handle1 = handles[selectionIndex];\n\t\t\tvar handle2 = handles[selectionIndex+1];\n\n\t\t\thandle1.setHoverState();\n\t\t\thandle2.setHoverState();\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t}\n\t}\t\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is over selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOver(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\n\t\tif (this._overSelectionIndex != selectionIndex){\n\t\t\tthis._overSelectionIndex = selectionIndex;\n\t\t\tthis._updateSelection();\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is out of selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOut(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\n\n\t\tthis._overSelectionIndex = null;\n\t\tthis._updateSelectionControlsHoverState(null);\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t\n\t}\n\n\t/**\n\t * @private \n\t * Handles hover state\n\t */\n\t_handleHoverState(){\n\t\tvar g = this._groupEl;\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\n\t}\t\n\n\t/**\n\t * @private \n\t * Handles when handle is dragged\n\t */\n\t_onHandleDrag(){\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\n\t\t\treturn p1-p2;\n\t\t});\n\n\t\tthis._updateSelectionPositions(positions);\n\t\tthis._updateSelection();\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection with new positions\n\t* @param {Array} positions\n\t* @param {Array} points\n\t*/\n\t_updateSelectionPositions(positions, points){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tpositions.forEach((p, index)=>{\n\t\t\tif (index>selection.length-1){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar position = {\n\t\t\t\tfrom:p,\n\t\t\t\tto:positions[index+1]\n\t\t\t};\n\n\t\t\tvar value = {\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\n\t\t\t};\n\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\n\t\t\t\tconst selectionChanged = points?\n\t\t\t\t\t// if new points are given, we need to compare selection values\n\t\t\t\t\tselection[index][pos] !== value[pos]:\n\t\t\t\t\t// otherwise, we need to compare selection position\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\n\n\t\t\t\t// update selection on change\n\t\t\t\tif (selectionChanged){\n\t\t\t\t\tselection[index][pos] = value[pos];\t\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\t\n\n\t/**\n\t* @private\n\t* Renders selection bars\n\t*/\n\t_renderSelection() {\n\t\tvar height = this._options.height;\n\t\tvar selection = this._histogramSelection.getSelection();\n\n\t\t// hover selection bars\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.enter().append(\"rect\")\n\t\t\t.attr(\"class\", style.selectionbar)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"height\", height);      \n\n\n\t\tthis._renderHandles();\n\t}\n\n\t/**\n\t* @private\n\t* Renders selection controls\n\t*/\n\t_renderHandles(){\n\t\t// render selection controls\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\n\t\t\tvar value = point.value;\n\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\n\n\t\t\tif(point.hidden){\n\t\t\t\thandle.hide();\n\t\t\t}\n\n\t\t\thandle.on(\"drag\", ()=>{\n\t\t\t\tthis._onHandleDrag();\n\t\t\t}, this);\n\n\t\t\tvar startSelectionSnapshot;\n\n\t\t\t// disable other handles when draggin starts\n\t\t\thandle.on(\"startDrag\", ()=>{\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\n\t\t\t\t\n\t\t\t\tthis._draggingHandle = true;\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\n\t\t\t\thandle.enable();\n\t\t\t}, this);\n\n\t\t\t// enable all handles when draggin starts\n\t\t\thandle.on(\"endDrag\", ()=>{\n\t\t\t\tthis._draggingHandle = false;\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\n\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\n\t\t\n\t\t\treturn handle;\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Returns bar color based on X position\n\n\t* @param {Number} barX\n\t* @param {Array} selection\n\t* @returns {Number} bar category index\n\t* @param {HistogramData} histogram data \n\t*/\n\t_getBarSelectionIndex(barX, selection, data){\n\t\tfor (var i=0;i<selection.length;i++){\n\t\t\tvar s = selection[i];\n\t\t\tvar isLast = i == selection.length-1;\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\n\t\t\tif (within) return i;\n\t\t}\n\n\t\treturn null;\n\t}\t\n\n\t/**\n\t * @private\n\t * Returns selection color\n\t * @param {Object} selection\n\t * @param {Object} d datum\n\t */\n\t_getSelectionColor(selection, d){\n\t\tif (selection.colors){\n\t\t\treturn selection.colors[d.volumeIndex];\n\t\t}\n\n\t\tif (selection.color){\n\t\t\treturn selection.color\n\t\t}\n\n\t\treturn this._options.selectionColor;\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarColor (barX, selection, data, d){\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\n\t\tvar overSelectionColor = this._options.overSelectionColor;\n\t\t\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tif (barSelectionIndex == null){\n\t\t\treturn inactiveBarColor;\n\t\t} else if (selection[barSelectionIndex].disabled){\n\t\t\treturn inactiveBarColor;\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\n\t\t\treturn overSelectionColor;\n\t\t} else {\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarOpacity (barX, selection, data){\n\t\tvar defaultOpacity = 1;\n\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\n\n\t\tif (isOver){\n\t\t\treturn this._options.overSelectionOpacity;\n\t\t}\n\n\t\tif (isDisabled){\n\t\t\treturn this._options.inactiveBarOpacity;\n\t\t}\n\t\t\n\t\t// otherwise use set opacity if \n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\n\t\t\treturn selection[barSelectionIndex].opacity;\n\t\t} \n\n\t\treturn defaultOpacity;\n\t}\t\n\n\t/**\n\t * Runs onTransition as a transition between two selections\n\t * @param {Array} selection1 \n\t * @param {Array} selection2 \n\t * @param {Function} onTransition handler\n\t */\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\n\t\tselection1.forEach((s1,selectionIndex)=>{\n\t\t\tvar s2 = selection2[selectionIndex];\n\t\t\tvar width = this._options.width;\n\t\t\tif (selection1[selectionIndex]){\n\t\t\t\tvar transitions = [];\n\t\t\t\tvar frames = [];\n\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\n\n\t\t\t\t// make sure duration is calculated based on transition length\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\n\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\n\t\t\t\t\tvar duration = 0;\n\n\t\t\t\t\twhile(t[0] !== t[1]){\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\n\t\t\t\t\t\t\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\n\t\t\t\t\t// when one of the sides is in the same position\n\t\t\t\t\tif (duration>0){\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\n\t\t\t\t\t\t\tonTransition(p, si, hi)\n\t\t\t\t\t\t\tonComplete(p, si, hi);\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection\n\t*/\n\t_updateSelection(){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\n\n\t\t// fills bars with given selection\n\t\tvar fillBars = (s, data) => {\n\t\t\t// handle bar colors\n\t\t\tbars.attr(\"fill\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\n\t\t\t})\n\n\t\t\t// handle bar opacity\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\n\t\t\t})\n\t\t}\n\n\t\t// handle animation if previous selection is set\n\t\tif (this._animate && this._prevSelection){\n\t\t\tvar prevSelection = this._prevSelection;\n\t\t\tvar prevData = this._prevHistogramData;\n\t\t\t\n\t\t\t// set prev selection\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\n\n\t\t\t// set handle positions to prev selection\n\t\t\tprevSelection.forEach((s, i)=>{\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\n\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\n\t\t\t});\n\n\t\t\tthis._animating = true;\n\t\t\t//fill bars on selection transition and move handles\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \n\t\t\t\t// on transition callback\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\n\t\t\t\t\tbar.attr(\"fill\", d=>{\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\n\t\t\t\t\t});\n\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\n\t\t\t\t\t// move handles\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\n\n\t\t\t\t// on complete callback\t\t\n\t\t\t},()=>{\n\t\t\t\t\t// hide handles\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\n\t\t\t\t\tfillBars(selection, this._histogramData)\n\t\t\t\t\tthis._animating = false;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis._prevSelection = null;\n\t\t\tthis._prevHistogramData = null;\n\t\t\n\t\t} else {\n\t\t\tfillBars(selection, this._histogramData)\n\t\t}\n\t\t\n\t\t// selection rects\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.attr(\"data-selection-index\", function(d,i){\n\t\t\t\treturn i;\n\t\t\t})\n\t\t\t.attr(\"x\", (d) => { \n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\t// show label without calculating offsets when animating\n\t\tif (this._animating) {\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\n\t\t}\n\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\n\t\t\tvar handle1 = this._handles[i];\n\t\t\tvar handle2 = this._handles[i+1];\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t});\n\t\t\n\t\tthis._handles.forEach(handle=>handle.showLabel());\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\n\t}\t\t\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._clear();\n\n\t\treturn this;\n    }\t\t\n}","import style from \"./Histogram.css\";\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._historyData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * selection renderer\n\t\t */\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\n\n\t\t/**\n\t\t * @private\n\t\t * True if labels are visible\n\t\t */\n\t\tthis._labelsVisible = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {Array} selection\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n\n\t\t// relay selection events\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar margin = Defaults.MARGIN;\n\n\t\t// render SVG\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\n\t\t\t.classed(style.histogram, true);\n\n\t\t// render group element\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\n\t\t\t.classed(style.inactive, true)\n\t\t\t.attr(\"transform\",\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\t// handle hover over svg element\n\t\tsvg.on(\"mouseover.hover\", ()=>{\n\t\t\tg.classed(style.active, true)\n\t\t\tg.classed(style.inactive, false)\n\t\t})\n\n\t\tsvg.on(\"mouseout.hover\", ()=>{\n\t\t\tg.classed(style.inactive, true)\n\t\t\tg.classed(style.active, false)\n\t\t})\n\n\t\tthis._selectionRenderer.render(g);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\n\t\tthis._histogramData = histogramData;\t\t\n\t\tthis._clear();\n\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\n\n\t\tthis._renderXAxis();\t\t\n\t\tthis._renderDataBars();\n\n\t\tthis._prevData = histogramData.getData();\t\t\t\n\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\n\n\t\tif (this._labelsVisible){\n\t\t\tthis.showSelectionLabels()\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._selectionRenderer.showSelectionLabels();\n\t\t// hide axis labels when selection labels are visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\n\t\tthis._labelsVisible = true;\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._selectionRenderer.hideSelectionLabels();\n\t\t// show axis labels when selection labels are not visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\n\t\tthis._labelsVisible = false;\n\t}\t\n\n\t/**\n\t * @private\n\t * Renders data bars\n\t*/\n\t_renderDataBars() { \n\t\tvar data = this._histogramData.getData();\n\t\t// var prevData = this._prevData;\n\t\tvar height = this._options.height;\n\n\t\tvar y = this._yAxis;\n\n\t\tdata.forEach(d=>{\n\t\t\td.volume.forEach((v, i)=>{\n\t\t\t\tthis._groupEl\n\t\t\t\t\t.append(\"rect\")\n\t\t\t\t\t.datum({\n\t\t\t\t\t\tvalue:d.value,\n\t\t\t\t\t\tvolumeIndex:i\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", style.bar)\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\n\t\t\t\t\t.attr(\"width\", \"1\")\n\t\t\t\t\t.attr(\"y\", Math.floor(y(d.volume[i])))\n\t\t\t\t\t.attr(\"height\", Math.ceil(height - y(d.volume[i])))\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Renders X axis \n\t*/        \n\t_renderXAxis(){\n\t\tvar minMax = this._histogramData.getMinMax();\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\n\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\n\t\t\t.data([minMax.min, minMax.max])\n\t\t\t.enter()\n\t\t\t.append(\"text\")\n\t\t\t.text((d)=>format(d))\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.attr(\"transform\", (d, i)=>{\n\t\t\t\treturn [\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\n\t\t\t\t][i]\n\t\t\t})\n\t\t\t.attr(\"text-anchor\", function(d, i){\n\t\t\t\treturn [\"start\", \"end\"][i];\n\t\t\t})\n\t\t\t.classed(style[\"x-axis\"], true)\n\t}\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\t\tthis._selectionRenderer.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToogle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport HistogramData from \"./HistogramData\";\nimport HistogramRenderer from \"./HistogramRenderer\";\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * prompt handler\n\t\t */\n\t\tthis._options.promptHandler = options.promptHandler || null;\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar opacity \n\t\t */\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over selection opacity \n\t\t */\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Font size\n\t\t */\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * selection type\n\t\t */\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t * @param {MouseEvent} browser event\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\n\t\t\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Histogram} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._histogramRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @param {Array} selection\n\t * @param {Object} set data options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\n\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = (value => String(value));\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection type\n\t * @param {String} selectionType\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelectionType(selectionType){\n\t\tthis._options.selectionType = selectionType;\n\t\tthis.setSelection(this._selection);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._histogramRenderer.showSelectionLabels();\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._histogramRenderer.hideSelectionLabels();\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection\n\t * @param {Array} selection\n\t * @param {Object} options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelection(selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tif (!this._histogramData) {\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\n\t\t}\n\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection, options);\n\n\t\treturn this;\n\t}\n\n}\n\nHistogram.SelectionTypes = SelectionTypes;\nexport default Histogram;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 200;\n\n/**\n * @public\n * Default line color\n */\nexport const LINE_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default line colors\n */\nexport const LINE_COLORS = [];\n\n/**\n * @public\n * Default line opacity\n */\nexport const LINE_OPACITY = 1;\n\n/**\n * @public\n * Default fill color\n */\nexport const FILL_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default fill colors\n */\nexport const FILL_COLORS = [];\n\n/**\n * @public\n * Default fill opacity\n */\nexport const FILL_OPACITY = 0.1;\n\n/**\n * @public\n * Default line width\n */\nexport const LINE_WIDTH = 3;\n\n/**\n * @public\n * Default dot size\n */\nexport const DOT_SIZE = 6;\n\n/**\n * @public\n * Default margin \n */\nexport const MARGIN = {\n    bottom:28\n};\n\n/**\n * @public \n * Default axis color \n */\nexport const AXIS_COLOR = \"#f0f0f0\";\n\n\n/**\n * @public \n * Vertical label offset\n */\nexport const LABEL_OFFSET = 5;\n\n\n/**\n * @public \n * Zero line color\n */\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series) {\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tvar data = [].concat.apply([], series);\n\t\tvar min = d3.min(data, function (d) { return d.value; });\n\t\tvar max = d3.max(data, function (d) { return d.value; });\n\n\t\tif (data.length <= series.length) {\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nvar gradientID = 0;\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class TooltipRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._groupEl = groupEl;\n\t\tthis._rendered = true;\n\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\n\n\t\treturn this;\n\t}\n\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\n\t\tvar xpos = xPos;\n\t\tif (xpos - bottomLabelWidth/2 < 0){\n\t\t\treturn \"start\"\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\n\t\t\treturn \"end\"\n\t\t} else {\n\t\t\treturn \"middle\";\n\t\t}\n\t}\n\n\t_getTooltipHTML(d){\n\t\treturn d.tooltips.filter((tooltip, index)=>{\n\t\t\treturn d.values[index] != null;\n\t\t}).map((tooltip, index)=>{\n\t\t\tconst value = tooltip || this._options.format(d.values[index]);\n\t\t\tvar color = this._options.lineColors[index] || this._options.lineColor;\n\t\t\tconst icon = `\n\t\t\t\t<span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\n\t\t\t`;\n\n\t\t\tif (d.tooltips.length>1){\n\t\t\t\treturn icon + value;\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\t\n\t\t}).join(\"<br />\");\n\t}\n\n\t_onHoverAreaOver(d){\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\tvar width = this._options.width;\n\t\tvar xPos = x(d.label);\n\n\t\t// update tooltip position\n\t\tthis._tooltipGroup\n\t\t\t.transition()\n\t\t\t.duration(duration)\n\t\t\t.attr(\"visibility\", \"visible\")\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\n\n\t\t// update tooltip bottom label\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\n\t\tvar bottomMaskPadding = 25;\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\n\n\t\tthis._tooltipBottomLabel\n\t\t\t.text(d.label)\n\t\t\t.attr(\"text-anchor\", textAnchor);\n\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\n\t\t\treturn {\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\n\t\t\t\t\"middle\":\"translate(0, 0)\",\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\n\t\t\t}[textAnchor]\n\t\t});\n\t\t\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\n\t\tthis._tooltipBottomLabelMask\n\t\t\t.attr(\"width\", bottomMaskWidth)\n\t\t\t.attr(\"x\", ()=>{\n\t\t\t\treturn {\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\n\t\t\t\t}[textAnchor]\n\t\t\t})\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\n\n\t\t// update tooltip top label \n\t\tvar tooltipHtml = this._getTooltipHTML(d);\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\n\t\tvar labelLeft = this._getLabelLeft(xPos);\n\n\t\t// if value is not null or undefined\n\t\tif (d.values.some(d => d != null)){\n\t\t\tthis._tooltipTopLabel\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\n\t\t\t\t.style(\"visibility\", \"visible\")\n\t\t\t\t.style(\"top\", y(Math.max.apply(Math,d.values))-50+\"px\")\n\n\t\t\t// update line circle\n\t\t\tthis._tooltipLineCircle\n\t\t\t\t.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.style(\"visibility\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?\"visible\":\"hidden\";\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?y(d.values[i]):0\n\t\t\t\t})\t\t\t\t\n\t\t} else {\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\n\t}\n\n\t_getLabelLeft(xPos){\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\n\t\tvar labelLeft = xPos-labelWidth/2;\n\t\t\n\t\tif (labelLeft<0){\n\t\t\tlabelLeft = 0;\n\t\t}\n\n\t\tif (labelLeft>this._options.width - labelWidth){\n\t\t\tlabelLeft = this._options.width - labelWidth;\n\t\t}\n\n\t\treturn labelLeft;\n\t}\n\n\t_onMouseOut(){\n\t\t// only hide when mouse is outside of widget\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\n\t\t\tthis._hideTooltip();\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\t\n\t}\n\n\t_hideTooltip(){\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\n\t}\n\n\t_renderTooltip(){\n\t\tvar data = this._lineData.getMergedData();\n\t\t\n\t\tvar series = this._lineData.getSeries();\n\t\tvar hoverWidth;\n\t\tif (data.length>series.length){\n\t\t\thoverWidth = this._options.width / (data.length-1);\n\t\t} else {\n\t\t\thoverWidth = this._options.width;\n\t\t}\n\n\t\tthis._hoverAreas = this._groupEl\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\n\t\t\t.data(data)\n\t\t\t.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\n\t\t\t.attr(\"width\", hoverWidth)\n\t\t\t.attr(\"fill-opacity\", 0.00)\n\t\t\t.attr(\"x\", (d)=>{\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\n\t\t\t})\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\n\n\t\tthis._tooltipGroup = this._groupEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\n\n\n\t\tthis._tooltipLineCircle = this._tooltipGroup\n\t\t\t.selectAll(\".\"+style[\"tooltip-line-circle\"])\n\t\t\t.data(series)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\n\t\t\t.attr(\"stroke\", (d, i)=>{\n\t\t\t\treturn this._options.lineColors[i] || this._options.lineColor;\n\t\t\t})\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\n\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\n\t\t\t.attr(\"r\", 2.5 + 1/2)\n\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\n\t\t\t.attr(\"height\", 20)\n\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\n\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t.text(data[0].label)\n\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\n\t\t\t.insert(\"span\", \":first-child\")\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\n\t\t\t.style(\"position\", \"absolute\")\n\t\t\t.style(\"visibility\", \"hidden\")\n\n\t\tthis._tooltipRendered = true;\n\t}\n\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tif (this._tooltipRendered){\n\t\t\tthis._hoverAreas.remove();\n\t\t\tthis._tooltipGroup.remove();\n\t\t\tthis._tooltipTopLabel.remove();\n\t\t\tthis._tooltipRendered = false;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData, x, y){\n\t\tthis._xAxis = x;\n\t\tthis._yAxis = y; \n\t\tthis._lineData = lineData;\n\n\t\tthis._createMaskGradientElement();\n\t\tthis._clear();\n\t\tthis._renderTooltip();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._clear();\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport TooltipRenderer from \"./TooltipRenderer\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class LineRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\n\t\t// force position relative so the toolip shows correctly\n\t\tct.style(\"position\", \"relative\");\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.classed(style.svg, true)\n\t\t\t.classed(style.line, true);\n\n\t\t// render group element\n\t\tthis._groupEl = this._svgEl.append(\"g\");\n\n\t\tthis._tooltipRenderer.render(this._groupEl);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData){\n\t\tthis._lineData = lineData;\t\t\n\t\tthis._clear();\n\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar verticalSpacing = this._options.verticalSpacing;\n\n\t\tvar series = lineData.getSeries();\n\t\tvar allData = lineData.getAllData()\n\t\tvar minMax = lineData.getMinMax();\n\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\n\n\t\tx.domain(allData.map(function (d) {return d.label; }));\n\t\ty.domain([minMax.min, minMax.max]);\n\n\t\tthis._renderZeroLine(allData);\n\t\tseries.forEach((data, seriesIndex)=>{\n\t\t\tthis._renderDataLines(data, seriesIndex);\n\t\t});\n\t\tthis._renderXAxis(allData);\n\t\tthis._tooltipRenderer.update(lineData, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders x axis\n\t*/\n\t_renderXAxis(data){\n\t\tthis._groupEl.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke\", this._options.axisColor)\n\n\t\t// render to labels on start and end sides if multiple items are available\n\t\tif (data.length>1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\n\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[data.length-1].label)\n\t\t\t\t.attr(\"x\", this._options.width)\n\t\t\t\t.attr(\"text-anchor\", \"end\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\n\t\t// render single label in the middle if only one item is available\t\t\t\t\n\t\t} else if (data.length == 1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", this._options.width/2)\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\t\t}\t\n\t}\n\t/**\n\t * Returns true if graph should render zero line\n\t * @param {Array} data \n\t */\n\t_showZeroLine(){\n\t\tvar zeroLinePosition = this._yAxis(0);\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar treshold = 10;\n\t\treturn zeroLinePosition<axisPosition-treshold;\n\t}\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders zero line\n\t*/\n\t_renderZeroLine(){\n\t\tif (this._showZeroLine()){\n\t\t\tthis._groupEl.append(\"line\")\n\t\t\t\t.attr(\"x1\", 0)\n\t\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * @param {Number} seriesIndex\n\t * Renders data lines\n\t*/\n\t_renderDataLines(data, seriesIndex) { \n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\t\n\t\tvar options = this._options;\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\n\t\tvar lineColor = options.lineColors[seriesIndex] || options.lineColor;\n\t\tvar fillColor = options.fillColors[seriesIndex] || options.fillColor;\n\n\t\t// define the area\n\t\tvar area = d3.area()\n\t\t\t.x(function(d) {return x(d.label); })\n\t\t\t.y0(areaZero)\n\t\t\t.y1(function(d) { return y(d.value); });\n\n\t\t// define the line\n\t\tvar line = d3.line()\n\t\t\t.x(function(d) { return x(d.label); })\n\t\t\t.y(function(d) { return y(d.value); });\t\t\n\n\t\t// apply grouping if needed (null or other splits)\n\t\tconst groupedData = this._getGroupedData(data);\n\n\t\tgroupedData.forEach(lineData=>{\n\t\t\t// only add area if not rendering a dot\n\t\t\tif (lineData.length>1){\n\t\t\t\t// add the area path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t.data([lineData])\n\t\t\t\t.attr(\"class\", style[\"area\"])\n\t\t\t\t.attr(\"fill\", fillColor)\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\n\t\t\t\t.attr(\"d\", area);\n\t\t\t}\n\n\t\t\tif (lineData.length){\n\t\t\t\t// add the line path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t\t.data([lineData])\n\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\n\t\t\t\t\t.attr(\"stroke\", lineColor)\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\n\t\t\t\t\t.attr(\"d\", (d)=>{\n\t\t\t\t\t\tvar path = line(d);\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\n\t\t\t\t\t\t\treturn path + \" \" + path;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn path;\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\n\t}\n\n\t/**\n\t * @private\n\t * Splits given array into multiple in case there is null in value\n\t * @param {Array} data \n\t */\n\t_getGroupedData(data){\n\t\tlet group = [];\n\t\tconst result = [group];\n\t\t\n\t\tdata.forEach(item=>{\n\t\t\tif (item.value === null){\n\t\t\t\tgroup = [];\n\t\t\t\tresult.push(group);\n\t\t\t} else {\n\t\t\t\tgroup.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line colors \n\t\t */\n\t\tthis._options.lineColors = getOptionValue(options.lineColors, Defaults.LINE_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill colors\n\t\t */\n\t\tthis._options.fillColors = getOptionValue(options.fillColors, Defaults.FILL_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets multiple series of data\n\t * @param {Array[]} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetSeries(series) {\n\t\treturn this.setData.apply(this, series);\n\t}\n\n\t/**\n\t * Sets line data\n\t * @param {...Array} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default bar height\n */\nexport const BAR_HEIGHT = 43;\n\n/**\n * @public\n * Default inactive bar color\n */\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\n\n/**\n * @public\n * Default over bar color\n */\nexport const OVER_BAR_COLOR = \"#ffea00\";\n\n/**\n * @public\n * Default active bar color\n */\nexport const ACTIVE_BAR_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Default active bar colors\n */\nexport const ACTIVE_BAR_COLORS = [];\n\n/**\n * @public\n * Enables bar toggle\n */\nexport const ENABLE_BAR_TOGGLE = false;\n\n/**\n * @public\n * Enables bar hover \n */\nexport const ENABLE_BAR_HOVER = false;\n\n/**\n * @public\n * Label font size\n */\nexport const LABEL_FONT_SIZE = 13;\n\n/**\n * @public\n * Value font size\n */\nexport const VALUE_FONT_SIZE = 11;\n\n/**\n * @public\n * Default minMax value\n */\nexport const MINMAX = \"sum\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class BarData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series, options) {\n\t\tthis._options = options;\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\tdisabled:item.disabled,\n\t\t\t\thighlighted:item.highlighted,\n\t\t\t\tcolors:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tresult.colors.push(item.color);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tlet data = [].concat.apply([], series);\n\t\tif (this._options.minMax == \"sum\"){\n\t\t\tlet sums = this._series.map((data)=>{\n\t\t\t\treturn d3.sum(data, function (d) { return d.value; });\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tmin:0,\n\t\t\t\tmax:Math.max.apply(Math, sums)\n\t\t\t}\n\t\t} else {\n\t\t\tlet min = d3.min(data, function (d) { return d.value; });\n\t\t\tlet max = d3.max(data, function (d) { return d.value; });\n\t\n\t\t\tif (data.length <= series.length) {\n\t\t\t\tmin = Math.min(min, 0);\n\t\t\t\tmax = Math.max(max, 0);\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tmin: min,\n\t\t\t\tmax: max\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Bar.css\";\nimport * as Defaults from \"./BarDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nvar MASK_INDEX = 0;\n\n/**\n * @class\n * Bar renderer class\n * @param {Object} options\n */\nexport default class BarRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Bar options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._barData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Bar has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out of a bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOut\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is clicked\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barClick\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is disabled\n\t\t\t * @param {int} barIndex\n\t\t\t * @param {boolean} disabled\n\t\t\t */\n\t\t\t\"barDisabled\"\n\t\t]);\n\n\t\tthis._maskIndex = MASK_INDEX++;\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Bar has been rendered or not\n\t * @returns {boolean} true if Bar has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {BarHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Bar} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"class\", style.bar)\n\t\t\t.attr(\"height\", height);\n\n\t\t// render group element\n\t\tthis._groupEl = this._svgEl.append(\"g\");\n\n\n\t\tthis._clipPath = this._svgEl.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex)\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\n\t\t\t.attr(\"rx\", 2.5)\n\t\t\t.attr(\"ry\", 2.5)\n\t\t\t.attr(\"width\",this._options.width)\n\t\t\t.attr(\"height\", 5);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Sets bar data \n\t * @param {BarData}\n\t */\n\tsetData(barData){\n\t\tthis._barData = barData;\t\t\n\t\tthis._clear();\n\n\t\tvar data = barData.getMergedData();\n\t\tvar minMax = barData.getMinMax();\n\n\t\tvar barHeight = this._options.barHeight;\n\t\tvar height = data.length * barHeight;\n\n\t\tthis._xAxis = d3.scaleLinear().range([0, this._options.width]);\n\t\tthis._yAxis = d3.scaleBand().range([height, 0]);\t\n\n\t\tthis._svgEl.attr(\"height\", height);\t\n\n\t\tthis._xAxis.domain([0, minMax.max]);\n\t\tthis._yAxis.domain(data.map((item, i)=>i).reverse());\n\n\t\tthis._renderDataBars(data);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders data bars\n\t*/\n\t_renderDataBars(data) { \n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\tvar horizontalPadding = 10;\n\t\tvar barHeight = 5;\n\t\tvar observable = this._observable;\n\t\tvar options = this._options;\n\t\t\n\t\tdata.forEach((d, i)=>{\n\t\t\tconst barGroup = this._groupEl\n\t\t\t\t.datum(d)\n\t\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"class\", style[\"bar\"])\n\t\t\t\t.attr(\"transform\", ()=> {\n\t\t\t\t\treturn \"translate(0,\"+ (Math.floor(y(i)))+\")\"\n\t\t\t\t})\n\t\t\t\t.classed(style[\"bar-over\"], (d)=>{\n\t\t\t\t\treturn d.highlighted;\n\t\t\t\t})\n\t\t\t\t.on(\"mouseover\", function(d, i){\n\t\t\t\t\tif (options.enableBarHover){\n\t\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], true);\n\t\t\t\t\t\tobservable.fire(\"barOver\", i);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on(\"mouseout\", function(d, i){\n\t\t\t\t\tif (options.enableBarHover){\n\t\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], false);\n\t\t\t\t\t\tobservable.fire(\"barOut\", i);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on(\"click\", function(d, i){\n\t\t\t\t\tif (options.enableBarToggle){\n\t\t\t\t\t\tvar disabled = !d3.select(this).classed(style[\"bar-disabled\"]);\n\t\t\t\t\t\td3.select(this).classed(style[\"bar-disabled\"], disabled);\n\t\t\t\t\t\tobservable.fire(\"barDisabled\", i, disabled);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobservable.fire(\"barClick\", i);\n\t\t\t\t})\n\t\t\t\t.classed(style[\"bar-disabled\"], (d)=>{\n\t\t\t\t\treturn d.disabled;\n\t\t\t\t});\n\n\t\t\t\t// label\n\t\t\t\tbarGroup.append(\"text\")\n\t\t\t\t\t.text(d=>d.label)\n\t\t\t\t\t.attr(\"class\", style[\"bar-label\"])\n\t\t\t\t\t.attr(\"x\", horizontalPadding)\n\t\t\t\t\t.attr(\"font-size\", this._options.labelFontSize)\n\t\t\t\t\t.attr(\"y\", this._options.labelFontSize)\n\n\t\t\t\t// tooltip\n\t\t\t\tlet tooltipX = horizontalPadding;\n\t\t\t\td.values.forEach((value, valueIndex)=>{\n\t\t\t\t\tconst tooltipEl = barGroup.append(\"text\")\n\t\t\t\t\t\t.text(()=>{\n\t\t\t\t\t\t\t// generating tooltip in reversed order as it goes from right -> left\n\t\t\t\t\t\t\tconst reversedIndex = d.values.length - 1 - valueIndex;\n\t\t\t\t\t\t\treturn d.tooltips[reversedIndex] || this._options.format(d.values[reversedIndex])\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.attr(\"class\", style[\"bar-tooltip\"])\n\t\t\t\t\t\t.attr(\"x\", this._options.width-tooltipX)\n\t\t\t\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t\t\t\t.attr(\"font-size\", this._options.valueFontSize)\n\t\t\t\t\t\t.attr(\"y\", this._options.labelFontSize)\n\n\t\t\t\t\ttooltipX+= tooltipEl.node().getComputedTextLength()+25;\n\n\t\t\t\t\tif (d.values.length>1){\n\t\t\t\t\t\tbarGroup\n\t\t\t\t\t\t\t.append(\"circle\")\n\t\t\t\t\t\t\t.attr(\"r\", 3)\n\t\t\t\t\t\t\t.attr(\"fill\", ()=>{\n\t\t\t\t\t\t\t\t// generating in reversed order as it goes from right -> left\n\t\t\t\t\t\t\t\tconst reversedIndex = d.values.length - 1 - valueIndex;\n\t\t\t\t\t\t\t\treturn d.colors[reversedIndex] || options.activeBarColors[reversedIndex] || options.activeBarColor\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.attr(\"cx\", this._options.width-tooltipX-this._options.labelFontSize+30)\n\t\t\t\t\t\t\t.attr(\"cy\", this._options.labelFontSize/1.5)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst barOffset = valueIndex*(barHeight+1);\n\t\t\t\t\t// active bar\n\t\t\t\t\tbarGroup.append(\"rect\")\n\t\t\t\t\t\t.attr(\"transform\", \"translate(0,\"+ barOffset + \")\")\t\t\t\t\t\t\n\t\t\t\t\t\t.attr(\"fill\",()=>{\n\t\t\t\t\t\t\treturn d.colors[valueIndex] || options.activeBarColors[valueIndex] || options.activeBarColor;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.attr(\"class\", style[\"bar-active\"])\n\t\t\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\")\n\t\t\t\t\t\t.attr(\"width\", function () { return Math.floor(x(value)); })\n\t\t\t\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\n\t\t\t\t\t\t.attr(\"height\", barHeight);\n\n\t\t\t\t\t// inactive bar\n\t\t\t\t\tbarGroup.append(\"rect\")\n\t\t\t\t\t\t.attr(\"transform\", \"translate(0,\"+ barOffset + \")\")\t\t\t\t\t\t\n\t\t\t\t\t\t.attr(\"fill\",Defaults.INACTIVE_BAR_COLOR)\n\t\t\t\t\t\t.attr(\"class\", style[\"bar-inactive\"])\n\t\t\t\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\")\n\t\t\t\t\t\t.attr(\"x\", () => {\n\t\t\t\t\t\t\treturn Math.floor(x(value));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.attr(\"width\", ()=> { return this._options.width - Math.floor(x(value)); })\n\t\t\t\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\n\t\t\t\t\t\t.attr(\"height\", barHeight)\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// hover\n\t\t\t\tbarGroup.append(\"rect\")\n\t\t\t\t\t.attr(\"class\", style[\"bar-hover\"])\n\t\t\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t\t\t.attr(\"cursor\",()=>this._options.enableBarHover?\"pointer\":\"default\")\n\t\t\t\t\t.attr(\"y\", 0)\n\t\t\t\t\t.attr(\"height\", this._options.barHeight)\t\t\t\t\t\n\t\t\t\t\t.attr(\"width\", this._options.width)\n\n\t\t});\n\t\t\n\n\t\t\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Bar UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./BarDefaults\";\nimport BarData from \"./BarData\";\nimport BarRenderer from \"./BarRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Bar class\n * @param {Object} options\n */\nclass Bar {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.barHeight = getOptionValue(options.barHeight, Defaults.BAR_HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.labelFontSize = getOptionValue(options.labelFontSize, Defaults.LABEL_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.valueFontSize = getOptionValue(options.valueFontSize, Defaults.VALUE_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overBarColor = getOptionValue(options.overBarColor, Defaults.OVER_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.activeBarColor = getOptionValue(options.activeBarColor, Defaults.ACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.activeBarColors = getOptionValue(options.activeBarColors, Defaults.ACTIVE_BAR_COLORS);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar toggle\n\t\t */\n\t\tthis._options.enableBarToggle = getOptionValue(options.enableBarToggle, Defaults.ENABLE_BAR_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar hover \n\t\t */\n\t\tthis._options.enableBarHover = getOptionValue(options.enableBarHover, Defaults.ENABLE_BAR_HOVER);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Allows to set minMax range, default is 'sum' (sum of all data items), can be also 'auto' (min/max based on data)\n\t\t */\n\t\tthis._options.minMax = getOptionValue(options.minMax, Defaults.MINMAX);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out of bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOut\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is clicked\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barClick\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is disabled\n\t\t\t * @param {int} barIndex\n\t\t\t * @param {boolean} disabled\n\t\t\t */\n\t\t\t\"barDisabled\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * BarRenderer\n\t\t */\n\t\tthis._barRenderer = new BarRenderer(this._options);\n\n\t\tthis._barRenderer.on(\"barOver\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOver\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barOut\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOut\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barClick\", (barIndex)=>{\n\t\t\tthis._observable.fire(\"barClick\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barDisabled\", (barIndex, disabled)=>{\n\t\t\tthis._observable.fire(\"barDisabled\", barIndex, disabled);\n\t\t})\t\t\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Bar} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._barRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Bar} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._barRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {...Array} series\n\t * @returns {Bar} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._barRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar barData = this._barData = new BarData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._barData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._barRenderer.setData(barData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Bar;\n","\nexport const WIDTH = 360;\nexport const HEIGHT = 129;\nexport const LABEL_FONT_SIZE = 13;\nexport const TOOLTIP_FONT_SIZE = 11;\nexport const TOOLTIP_SYMBOL = '\\u26AB';\nexport const ACTIVE_COLORS = [\"#49ace2\", \"#CD21D3\"];\nexport const DETAILS_HIDDEN = false;\nexport const MINMAX = \"sum\";\nexport const DUAL_VALUE = false;\nexport const ENABLE_BAR_HOVER = false;\nexport const ENABLE_BAR_TOGGLE = false;\nexport const FORMAT = \",f\";\nexport const BAR_HEIGHT = 43;\nexport const BAR_DISABLED = false;\nexport const HORIZONTAL_PADDING = 10;\nexport const STRIPE_HEIGHT = 5;\nexport const STRIPE_BACKGROUND_COLOR = \"#f0f0f0\";\nexport const TOOLTIP_SPACE = 3;\nexport const BAR_HIGHLIGHTED = false;\nexport const CORNER_ROUNDED = true;","import style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Observable from \"../../utils/Observable\";\n\nlet MASK_INDEX = 0;\n\nclass Component {\n\n\tconstructor(\n\t\t\twidth,\n\t\t\theight,\n\t\t\tclassName = \"component\",\n\t\t\talignRight = false,\n\t\t\talignBottom = false\n\t) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._container = null;\n\t\tthis._maskIndex = MASK_INDEX++;\n\t\tthis._className = className;\n\t\tthis._observable = new Observable([\n\t\t\t\"enter\",\n\t\t\t\"leave\",\n\t\t\t\"click\"\n\t\t]);\n\t\tthis._alignRight = alignRight;\n\t\tthis._alignBottom = alignBottom;\n\n\t\tthis._data = null;\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tget width() {\n\t\treturn this._width;\n\t}\n\n\tget height() {\n\t\treturn this._height;\n\t}\n\n\tget className() {\n\t\treturn this._className;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\tget alignRight() {\n\t\treturn this._alignRight;\n\t}\n\n\tget alignBottom() {\n\t\treturn this._alignBottom;\n\t}\n\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\tset width(value) {\n\t\tthis._width = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"width\", value);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"x\", -value);\n\t\t}\n\t}\n\n\tset height(value) {\n\t\tthis._height = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"height\", value);\n\t\t}\n\t\tif (this.alignBottom) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"y\", -value);\n\t\t}\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\treturn d3.select(selector).append(\"g\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\n\n\t}\n\n\trender(selector, x = 0, y = 0, index = 0){\n\t\tthis.destroy();\n\n\t\tthis._container = this._renderContainer(selector, x, y);\n\n\t\tthis._container.datum(index);\n\n\t\tthis._container\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\tthis._observable.fire(\"click\", index)\n\t\t\t})\n\t\t\t.on(\"mouseenter\", (index) => {\n\t\t\t\tthis._observable.fire(\"enter\", index)\n\t\t\t})\n\t\t\t.on(\"mouseleave\", (index) => {\n\t\t\t\tthis._observable.fire(\"leave\", index)\n\t\t\t});\n\n\t\tif (!this._container) {\n\t\t\tthrow `Component ${this._className} was not rendered. Check your selector: ${selector}`;\n\t\t}\n\n\t\t// clickable area\n\t\tconst clickableArea = this._container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"clickable-area\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tif (this.alignBottom) {\n\t\t\tclickableArea.attr(\"y\", -this.height);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tclickableArea.attr(\"x\", -this.width);\n\t\t}\n\n\t\tthis._render(index);\n\n\t\treturn this;\n\t}\n\n\t_render(index){\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\tdestroy(){\n\t\tif (this.isRendered()) {\n\t\t\tthis.clearData();\n\t\t\tthis._container.datum(null);\n\t\t\tthis._container.remove();\n\t\t\tthis._container = null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tisRendered(){\n\t\treturn this._container !== null;\n\t}\n\n\tsetData(data) {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._setData(data);\n\t\tthis._data = data;\n\t\treturn this;\n\t}\n\n\tgetData() {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call getData() when component is not rendered, please call .render() first.\"\n\t\t}\n\t\treturn this._data;\n\t}\n\n\tclearData() {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call clearData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._clearData();\n\t\tthis._data = null;\n\t\treturn this;\n\t}\n\n\t_setData(data) {\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\t_clearData() {\n\t\t// prepared to be implemented by subclasses\n\t}\n}\n\nexport default Component;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\n\nclass Tooltip extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\twidth = fontSize,\n\t\t\theight = fontSize,\n\t\t\tsymbol,\n\t\t\tactiveColor = Defaults.ACTIVE_COLORS[0],\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tspace = Defaults.TOOLTIP_SPACE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"tooltip\", true, true);\n\t\tthis._fontSize = fontSize;\n\t\tthis._symbol = symbol;\n\t\tthis._activeColor = activeColor;\n\t\tthis._format = format;\n\t\tthis._space = space;\n\t}\n\n\t_render() {\n\n\t\tthis.container.append(\"text\")\n\t\t\t.text(\"-\")\n\t\t\t.attr(\"class\", style[\"tooltip-text\"])\n\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t.attr(\"font-size\", this.fontSize);\n\n\t}\n\n\t/**\n\t * @param {TooltipData} data\n\t */\n\t_setData(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tlet text = data.text;\n\t\tif (data.isNumber()) {\n\t\t\ttext = d3.format(format)(data.text);\n\t\t}\n\n\t\tconst tooltipText = this.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(text);\n\n\t\tlet tooltipWidth = tooltipText.node().getBBox().width;\n\n\t\tif (data.symbol || this.symbol) {\n\n\t\t\tconst tooltipSymbol = this.container.append(\"text\")\n\t\t\t\t.text(data.symbol ? data.symbol : this.symbol)\n\t\t\t\t.attr(\"class\", style[\"symbol\"])\n\t\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t\t.attr(\"font-size\", this.fontSize)\n\t\t\t\t.attr(\"fill\", data.color ? data.color : this.activeColor)\n\t\t\t\t.attr(\"x\", -tooltipWidth - this.space);\n\n\t\t\ttooltipWidth += tooltipSymbol.node().getBBox().width + this.space;\n\t\t}\n\n\t\tthis.width = tooltipWidth;\n\t\tthis.height = tooltipText.node().getBBox().height;\n\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(\"-\");\n\n\t\tthis.container.select(`.${style[\"symbol\"]}`).remove()\n\t}\n\n\tget fontSize() {\n\t\treturn this._fontSize;\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\n\tget activeColor() {\n\t\treturn this._activeColor;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget space() {\n\t\treturn this._space;\n\t}\n}\n\nexport default Tooltip;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Tooltip from \"./Tooltip\";\n\nclass Details extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = labelFontSize + 10,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tformat = Defaults.FORMAT,\n\t\t}\n\t) {\n\t\tsuper(width, height, \"details\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._format = format;\n\n\t\tthis._tooltips;\n\t}\n\n\t_render() {\n\n\t\tthis.container.append(\"text\")\n\t\t\t.text(\"-\")\n\t\t\t.attr(\"class\", style[\"label\"])\n\t\t\t.attr(\"x\", Defaults.HORIZONTAL_PADDING)\n\t\t\t.attr(\"y\", this.labelFontSize)\n\t\t\t.attr(\"font-size\", this.labelFontSize);\n\n\t}\n\n\t/**\n\t * @param {DetailsData} data\n\t */\n\t_setData(data) {\n\n\t\tthis.container.select(`.${style[\"label\"]}`).text(data.label);\n\n\t\tthis.container.classed(style['details-disabled'], data.disabled);\n\n\t\tif (typeof data.tooltips !== 'undefined') {\n\t\t\tthis.updateTooltipsData(data.tooltips, data.getPrecision(\"max\"), data.color);\n\t\t}\n\t}\n\n\t/**\n\t * @param {TooltipData[]} tooltipsData\n\t * @param {number} precision\n\t * @param {String} color\n\t */\n\tupdateTooltipsData(tooltipsData, precision, color) {\n\n\t\tthis.container.selectAll(`.${style[\"tooltip\"]}`).remove();\n\n\t\tconst tooltipsReversed = tooltipsData.slice();\n\t\ttooltipsReversed.reverse();\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = precision;\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tlet previousTooltipX = this.width - Defaults.HORIZONTAL_PADDING;\n\n\t\tthis._tooltips = tooltipsData.map((_, index) => new Tooltip({\n\t\t\tfontSize: this.tooltipFontSize,\n\t\t\tsymbol: tooltipsData.length>1 ? this.tooltipSymbol : undefined,\n\t\t\tactiveColor: color ? color : this.activeColors[index % 2],\n\t\t\tformat: format\n\t\t}));\n\t\tthis._tooltips.forEach((_, index) => {\n\t\t\tconst reversedIndex = this._tooltips.length - 1 - index;\n\t\t\tconst tooltipReversed = this._tooltips[reversedIndex];\n\t\t\tconst tooltipData = tooltipsData[reversedIndex];\n\n\t\t\ttooltipReversed.render(this.container.node(), previousTooltipX, this.labelFontSize, reversedIndex);\n\t\t\ttooltipReversed.setData(tooltipData);\n\n\t\t\tpreviousTooltipX -= tooltipReversed.width + 24;\n\t\t});\n\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"label\"]}`).text(\"-\");\n\t\tthis.container.selectAll(`.${style[\"tooltip\"]}`).remove();\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n}\n\nexport default Details;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport * as d3 from \"d3\";\nimport style from \"../Barchart.css\";\n\nclass Stripe extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.STRIPE_HEIGHT,\n\t\t\tbackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\ttopCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tbottomCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t}) {\n\t\tsuper(width, height, \"stripe\");\n\t\tthis._backgroundColor = backgroundColor;\n\t\tthis._activeColors = activeColors;\n\t\tthis._dualValue = dualValue;\n\t\tthis._minMax = minMax;\n\t\tthis._topCornerRounded = topCornerRounded;\n\t\tthis._bottomCornerRounded = bottomCornerRounded;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget backgroundColor() {\n\t\treturn this._backgroundColor;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget topCornerRounded() {\n\t\treturn this._topCornerRounded;\n\t}\n\n\tget bottomCornerRounded() {\n\t\treturn this._bottomCornerRounded;\n\t}\n\n\t_render() {\n\n\t\tconst clipPath = this.container.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex);\n\n\t\tclipPath\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"rx\", Math.min(this.width, this.height)/2)\n\t\t\t.attr(\"ry\", Math.min(this.width, this.height)/2);\n\n\t\tif (!this.topCornerRounded) {\n\t\t\tclipPath\n\t\t\t\t.append(\"rect\")\n\t\t\t\t.attr(\"y\", 0)\n\t\t\t\t.attr(\"width\", this.width)\n\t\t\t\t.attr(\"height\", this.height/2);\n\t\t}\n\t\tif (!this.bottomCornerRounded) {\n\t\t\tclipPath\n\t\t\t\t.append(\"rect\")\n\t\t\t\t.attr(\"y\", this.height/2)\n\t\t\t\t.attr(\"width\", this.width)\n\t\t\t\t.attr(\"height\", this.height/2);\n\t\t}\n\n\t\tthis._renderProgress(0, this.width, this.backgroundColor, \"stripe-background\");\n\t}\n\n\t/**\n\t * @param {StripeData} data\n\t */\n\t_setData(data) {\n\n\t\tif (this.dualValue) {\n\n\t\t\tthis._renderStripe(0, this.width/2-0.5,\n\t\t\t\tdata.left.value,\n\t\t\t\tdata.left.color ? data.left.color : this.activeColors[1] ? this.activeColors[1] : this.activeColors[0],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tthis._renderStripe(this.width/2+0.5, this.width,\n\t\t\t\tdata.right.value,\n\t\t\t\tdata.left.color ? data.left.color : this.activeColors[0],\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t} else {\n\t\t\tthis._renderStripe(0, this.width, data.value, data.color ? data.color : this.activeColors[0]);\n\t\t}\n\t}\n\n\t_clearData() {\n\t\tthis.container.selectAll(style[\"progress\"]).remove();\n\t}\n\n\n\t_renderXBase(x) {\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"y2\", -4)\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", this.height)\n\t\t\t.attr(\"y2\", this.height + 4)\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\t}\n\n\t_renderStripe(x1, x2, value, color, alignRight = false) {\n\n\t\tconst axis = d3.scaleLinear()\n\t\t\t.range([x1, x2]);\n\n\t\tif (alignRight) {\n\t\t\taxis.domain([this.minMax.max, this.minMax.min]);\n\t\t} else {\n\t\t\taxis.domain([this.minMax.min, this.minMax.max]);\n\t\t}\n\n\t\tconst xBase = axis(0);\n\n\t\tif (this.minMax.min < 0 && this.minMax.max > 0) {\n\t\t\tthis._renderXBase(xBase);\n\t\t}\n\n\t\tif (alignRight === value < 0) {\n\n\t\t\tthis._renderProgress(xBase, axis(value), color);\n\n\t\t} else {\n\n\t\t\tthis._renderProgress(axis(value), xBase, color);\n\n\t\t}\n\n\t}\n\n\t_renderProgress(x1, x2, color, className = \"progress\") {\n\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"fill\", color)\n\t\t\t.attr(\"class\", style[className])\n\t\t\t.attr(\"x\", x1)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", x2-x1)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"transform\", \"translate(\" + 0 + \", \" + 0 + \")\")\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\");\n\n\t}\n\n\n}\n\nexport default Stripe;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\n\nclass Bar extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.BAR_HEIGHT\n\t\t}\n\t) {\n\t\tsuper(width, height, \"hover\");\n\n\t\tthis._observable\n\t\t\t.add(\"leftEnter\")\n\t\t\t.add(\"leftLeave\")\n\t\t\t.add(\"rightEnter\")\n\t\t\t.add(\"rightLeave\")\n\t\t\t.add(\"middleEnter\")\n\t\t\t.add(\"middleLeave\");\n\t}\n\n\t_render() {\n\t\t// Thirds hover\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"bar-left\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", 0)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", this.width/3)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\tthis._observable.fire(\"leftEnter\", this.container.datum());\n\t\t\t})\n\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\tthis._observable.fire(\"leftLeave\", this.container.datum());\n\t\t\t});\n\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"bar-middle\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", this.width/3)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", this.width/3)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\tthis._observable.fire(\"middleEnter\", this.container.datum());\n\t\t\t})\n\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\tthis._observable.fire(\"middleLeave\", this.container.datum());\n\t\t\t});\n\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"bar-right\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", this.width*(2/3))\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", this.width/3)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\tthis._observable.fire(\"rightEnter\", this.container.datum());\n\t\t\t})\n\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\tthis._observable.fire(\"rightLeave\", this.container.datum());\n\t\t\t});\n\t}\n\n}\n\nexport default Bar;\n","\nexport default class TooltipData {\n\n\tconstructor(\n\t\t{\n\t\t\ttext,\n\t\t\tsymbol,\n\t\t\tcolor\n\t\t}\n\t) {\n\t\tif (typeof text === 'undefined') throw \"text is required parameter\";\n\t\tthis._symbol = symbol;\n\t\tthis._color = color;\n\t\tthis._text = text;\n\t}\n\n\t/**\n\t * @param {TooltipData} tooltipData\n\t */\n\tstatic copyAs(tooltipData) {\n\t\treturn new TooltipData({\n\t\t\ttext: tooltipData.text,\n\t\t\tsymbol: tooltipData.symbol,\n\t\t\tcolor: tooltipData.color\n\t\t});\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\tset symbol(symbol) {\n\t\tthis._symbol = symbol;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget text() {\n\t\treturn this._text;\n\t}\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (this.isNumber()) {\n\t\t\t\tconst str = this.text.toString();\n\t\t\t\tif (str.includes('.')) {\n\t\t\t\t\treturn str.split(\".\")[1].length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n\tisNumber() {\n\t\treturn !isNaN(parseFloat(this.text)) && isFinite(this.text);\n\t}\n\n}","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Details from \"./Details\";\nimport Stripe from \"./Stripe\";\nimport Hover from \"./Hover\";\nimport style from \"../Barchart.css\";\nimport TooltipData from \"../data/TooltipData\";\n\nclass Bar extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.BAR_HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsHidden = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + 10,\n\t\t\tenableHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tdisabled = Defaults.BAR_DISABLED,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR\n\t\t}\n\t) {\n\t\tsuper(width, height, \"bar\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsHidden = detailsHidden;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._enableHover = enableHover;\n\t\tthis._enableToggle = enableToggle;\n\t\tthis._dualValue = dualValue;\n\t\tthis._disabled = disabled;\n\t\tthis._format = format;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\n\t\tthis._details;\n\t\tthis._stripes;\n\n\t\tthis._observable\n\t\t\t.add(\"leftEnter\")\n\t\t\t.add(\"leftLeave\")\n\t\t\t.add(\"rightEnter\")\n\t\t\t.add(\"rightLeave\")\n\t\t\t.add(\"middleEnter\")\n\t\t\t.add(\"middleLeave\")\n\t\t\t.add(\"disabled\");\n\t}\n\n\tget stripes() {\n\t\treturn this._stripes;\n\t}\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n\t_render() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._details = new Details({\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.detailsHeight,\n\t\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\t\tactiveColors: this.activeColors,\n\t\t\t\tformat: this.format\n\t\t\t});\n\t\t\tthis._details.render(this.container.node(), 0, 0);\n\t\t}\n\n\t\tthis.container.classed(style['hover-enabled'], this.enableHover);\n\n\t\tthis._hover = new Hover({\n\t\t\twidth: this.width,\n\t\t\theight: this.height,\n\t\t});\n\t\tthis._hover.render(this.container.node(), 0, 0)\n\t\t\t.on(\"leftEnter\", (data) => {\n\t\t\t\tthis._observable.fire(\"leftEnter\", data);\n\t\t\t})\n\t\t\t.on(\"leftLeave\", (data) => {\n\t\t\t\tthis._observable.fire(\"leftLeave\", data);\n\t\t\t})\n\t\t\t.on(\"rightEnter\", (data) => {\n\t\t\t\tthis._observable.fire(\"rightEnter\", data);\n\t\t\t})\n\t\t\t.on(\"rightLeave\", (data) => {\n\t\t\t\tthis._observable.fire(\"rightLeave\", data);\n\t\t\t})\n\t\t\t.on(\"middleEnter\", (data) => {\n\t\t\t\tthis._observable.fire(\"middleEnter\", data);\n\t\t\t})\n\t\t\t.on(\"middleLeave\", (data) => {\n\t\t\t\tthis._observable.fire(\"middleLeave\", data);\n\t\t\t});\n\n\t\tthis.container.attr(\"cursor\", this.enableToggle ? \"pointer\" : \"default\");\n\n\t\tthis.on(\"click\", (index) => {\n\t\t\tif (this.enableToggle) {\n\t\t\t\tthis._disabled = !this._disabled;\n\t\t\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\t\t\tthis._observable.fire(\"disabled\", index, this._disabled);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param {BarData} data\n\t */\n\t_setData(data) {\n\t\tif (this.enableHover) {\n\t\t\tthis._hover.setData(data);\n\t\t}\n\t\tthis._disabled = data.disabled;\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\tthis.container.classed(style[\"bar-highlighted\"], data.highlighted);\n\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\t\tthis._stripes = data.stripes.map((stripe, index) => {\n\t\t\tlet colors = this.activeColors;\n\t\t\tif (data.stripes.length > 1) {\n\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t} else {\n\t\t\t\tcolors = this.activeColors;\n\t\t\t}\n\n\t\t\treturn new Stripe({\n\t\t\t\twidth: this.width,\n\t\t\t\tactiveColors: data.color ? [data.color] : colors,\n\t\t\t\tdualValue: this.dualValue,\n\t\t\t\tminMax: minMax,\n\t\t\t\tbackgroundColor: this.stripeBackgroundColor,\n\t\t\t\ttopCornerRounded: index === 0,\n\t\t\t\tbottomCornerRounded: index === data.stripes.length-1\n\t\t\t})\n\t\t});\n\n\t\tconst tooltipsData = [];\n\t\tdata.stripes.forEach((stripeData, index) => {\n\n\t\t\tconst detailsHeight = this.detailsHidden ? 0 : this.detailsHeight;\n\t\t\tthis._stripes[index].render(this.container.node(), 0, detailsHeight + 5*index, index);\n\n\t\t\tthis._stripes[index].setData(stripeData);\n\n\t\t\tlet colors = this.activeColors;\n\t\t\tif (data.stripes.length > 1) {\n\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t} else {\n\t\t\t\tcolors = this.activeColors;\n\t\t\t}\n\n\t\t\tif (this.dualValue) {\n\t\t\t\ttooltipsData.push(new TooltipData({\n\t\t\t\t\ttext: stripeData.left.value,\n\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\tcolor: (colors[1] ? colors[1] : colors[0])\n\t\t\t\t}));\n\t\t\t\ttooltipsData.push(new TooltipData({\n\t\t\t\t\ttext: stripeData.right.value,\n\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\tcolor: colors[0]\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\ttooltipsData.push(new TooltipData({\n\t\t\t\t\ttext: stripeData.value,\n\t\t\t\t\tsymbol: data.stripes.length > 1 ? this.tooltipSymbol : undefined,\n\t\t\t\t\tcolor: colors[0]\n\t\t\t\t}));\n\t\t\t}\n\n\t\t});\n\n\t\tif (!this.detailsHidden) {\n\n\t\t\tthis._details.setData(data.details);\n\n\t\t\tif (typeof data.details.tooltips === 'undefined') {\n\t\t\t\tthis._details.updateTooltipsData(tooltipsData, data.details.getPrecision(\"max\"), data.details.color);\n\t\t\t}\n\n\t\t}\n\t}\n\n\t_clearData() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsHidden() {\n\t\treturn this._detailsHidden;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget enableToggle() {\n\t\treturn this._enableToggle;\n\t}\n\n\tget enableHover() {\n\t\treturn this._enableHover;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n}\n\nexport default Bar;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Bar from \"./Bar\";\nimport Details from \"./Details\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport TooltipData from \"../data/TooltipData\";\n\nclass Barchart extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsVisible = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + 10,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tbarHeight = Defaults.BAR_HEIGHT,\n\t\t\tenableBarHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableBarToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR\n\t\t}\n\t) {\n\t\tsuper(width, height, \"barchart\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsVisible = detailsVisible;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._dualValue = dualValue;\n\t\tthis._barHeight = barHeight;\n\t\tthis._enableBarHover = enableBarHover;\n\t\tthis._enableBarToggle = enableBarToggle;\n\t\tthis._format = format;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\n\t\tthis._details;\n\t\tthis._bars;\n\n\t\tthis._observable\n\t\t\t.add(\"barEnter\")\n\t\t\t.add(\"barLeave\")\n\t\t\t.add(\"barLeftEnter\")\n\t\t\t.add(\"barLeftLeave\")\n\t\t\t.add(\"barRightEnter\")\n\t\t\t.add(\"barRightLeave\")\n\t\t\t.add(\"barMiddleEnter\")\n\t\t\t.add(\"barMiddleLeave\")\n\t\t\t.add(\"barClick\")\n\t\t\t.add(\"barDisabled\")\n\t\t\t.add(\"barsEnter\")\n\t\t\t.add(\"barsLeave\");\n\n\t}\n\n\tisBarDisabled(index) {\n\t\treturn this._bars[index].disabled;\n\t}\n\n\tupdateData(updateFunction) {\n\t\tthis.setData(updateFunction(this.data));\n\t}\n\n\tupdateDetailsData(updateFunction) {\n\t\tthis.setDetailsData(updateFunction(this._details.data));\n\t}\n\n\tupdateBarData(index, updateFunction) {\n\t\tthis.setBarData(index, updateFunction(this._bars[index].data));\n\t}\n\n\tupdateBarDetailsData(index, updateFunction) {\n\t\tthis.setBarData(index, updateFunction(this._bars[index]._details.data));\n\t}\n\n\tsetBarData(index, barData) {\n\t\t//this.data.setBar(index, barData);\n\t\tthis._bars[index].setData(barData);\n\t}\n\n\tsetBarDetailsData(index, detailsData) {\n\t\t//this.data.getBar(index).details = detailsData;\n\t\tthis._bars[index]._details.setData(detailsData);\n\t}\n\n\tsetDetailsData(detailsData) {\n\t\t//this.data.details = detailsData;\n\t\tthis._details.setData(detailsData);\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\tthis._svgWrapper = d3.select(selector).append(\"svg\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tthis._svgWrapper.style({\n\t\t\t\t'position': 'relative',\n\t\t\t\t'left': x,\n\t\t\t\t'top': y\n\t\t\t});\n\n\t\treturn this._svgWrapper.append(\"g\")\n\t}\n\n\t_render() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._details = new Details({\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.detailsHeight,\n\t\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\t\tactiveColors: this.activeColors,\n\t\t\t\tformat: this.format\n\t\t\t});\n\t\t\tthis._details.render(this._container.node(), 0, 0);\n\t\t}\n\t}\n\n\t/**\n\t * @param {BarchartData} data\n\t */\n\t_setData(data) {\n\n\t\tlet height = data.bars.length * this.barHeight;\n\t\tif (this.detailsVisible) {\n\t\t\tthis._details.setData(data.details);\n\t\t\theight += this.detailsHeight;\n\t\t}\n\t\tthis.height = height;\n\t\tthis._svgWrapper.attr(\"height\", height);\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\n\t\tthis._bars = data.bars.map(() => new Bar({\n\t\t\twidth: this.width,\n\t\t\theight: this.barHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: data.color ? [data.color] : this.activeColors,\n\t\t\tdetailsHidden: this.detailsVisible,\n\t\t\tdetailsHeight: this.detailsHeight,\n\t\t\tdualValue: this.dualValue,\n\t\t\tenableToggle: this.enableBarToggle,\n\t\t\tenableHover: this.enableBarHover,\n\t\t\tminMax: minMax,\n\t\t\tformat: format,\n\t\t\tstripeBackgroundColor: this.stripeBackgroundColor\n\t\t}));\n\t\tdata.bars.forEach((barData, index) => {\n\t\t\tconst bar = this._bars[index];\n\n\t\t\tconst barsContainer = this._container.append(\"g\")\n\t\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\t\tthis._observable.fire(\"barsEnter\");\n\t\t\t\t})\n\t\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tthis.setDetailsData(this.data.details);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barsLeave\");\n\t\t\t\t});\n\n\t\t\tconst topDetailsWidth = (this.detailsVisible ? this.detailsHeight : 0);\n\t\t\tbar.render(barsContainer.node(), 0, topDetailsWidth + this.barHeight*index, index)\n\t\t\t\t.on(\"click\", (index) => {\n\t\t\t\t\tconsole.log(this._bars[index].data.details);\n\t\t\t\t\tthis._observable.fire(\"barClick\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"enter\", (index) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tconst detailsData = this._bars[index].data.details;\n\t\t\t\t\t\tif (typeof detailsData.tooltips === 'undefined') {\n\t\t\t\t\t\t\tthis._details.updateTooltipsData([new TooltipData({\n\t\t\t\t\t\t\t\ttext:this._bars[index].data.stripes[0].value\n\t\t\t\t\t\t\t})], data.details.getPrecision(\"max\"), data.details.color);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setDetailsData(detailsData);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"leave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"leftEnter\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barLeftEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"leftLeave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barLeftLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"rightEnter\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barRightEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"rightLeave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barRightLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"middleEnter\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barMiddleEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"middleLeave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barMiddleLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"disabled\", (index, disabled) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tthis.updateDetailsData(detailsData => {\n\t\t\t\t\t\t\tdetailsData.disabled = disabled;\n\t\t\t\t\t\t\treturn detailsData;\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barDisabled\", index, disabled);\n\t\t\t\t});\n\n\t\t\tbar.setData(barData);\n\t\t});\n\t}\n\n\t_clearData() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t\tthis._container.selectAll(`.${style[\"bar\"]}`).remove();\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsVisible() {\n\t\treturn this._detailsVisible;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget barHeight() {\n\t\treturn this._barHeight;\n\t}\n\n\tget enableBarHover() {\n\t\treturn this._enableBarHover;\n\t}\n\n\tget enableBarToggle() {\n\t\treturn this._enableBarToggle;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n}\n\nexport default Barchart;\n","\nexport default class StripeData {\n\n\tconstructor(\n\t\t{\n\t\t\tvalue,\n\t\t\tcolor,\n\t\t\tright: {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t} = {},\n\t\t\tleft: {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t} = {}\n\t\t}\n\t) {\n\t\tif (typeof value === 'undefined') {\n\t\t\tif (typeof leftValue === 'undefined') throw \"value or leftValue is required parameter\";\n\t\t\tif (typeof rightValue === 'undefined') throw \"value or rightValue is required parameter\";\n\n\t\t\tthis._right = {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t};\n\t\t\tthis._left = {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t}\n\t\t} else {\n\t\t\tthis._value = value;\n\t\t\tthis._color = color;\n\t\t}\n\t}\n\n\t/**\n\t * @param {StripeData} stripeData\n\t */\n\tstatic copyAs(stripeData) {\n\t\tif (stripeData.dual) {\n\t\t\treturn new StripeData({\n\t\t\t\tright: stripeData.right,\n\t\t\t\tleft: stripeData.left\n\t\t\t});\n\t\t} else {\n\t\t\treturn new StripeData({\n\t\t\t\tvalue: stripeData.value,\n\t\t\t\tcolor: stripeData.color,\n\t\t\t});\n\t\t}\n\t}\n\n\tget dual() {\n\t\treturn (typeof this._value === 'undefined');\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\tset value(value) {\n\t\tthis._value = value;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget left() {\n\t\treturn this._left;\n\t}\n\tset left(leftData) {\n\t\tthis._left = leftData;\n\t}\n\n\tget right() {\n\t\treturn this._right;\n\t}\n\tset right(rightData) {\n\t\tthis._right = rightData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (this.dual) {\n\t\t\tif (minMax === \"sum\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value + this.right.value)\n\t\t\t\t}\n\t\t\t} else if (minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value, this.right.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (minMax === \"sum\" || minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.value),\n\t\t\t\t\tmax: Math.max(0, this.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\t\t}\n\t}\n\n}","import * as Defaults from \"../defaults/BarchartDefaults\";\n\nexport default class BarData {\n\n\tconstructor(\n\t\t{\n\t\t\tdisabled = Defaults.BAR_DISABLED,\n\t\t\thighlighted = Defaults.BAR_HIGHLIGHTED,\n\t\t\tcolor\n\t\t},\n\t\tdetailsData,\n\t\tstripesData\n\t) {\n\t\tif (typeof stripesData === 'undefined') throw \"stripesData is required parameter\";\n\n\t\tthis._disabled = disabled;\n\t\tthis._highlighted = highlighted;\n\t\tthis._detailsData = detailsData;\n\t\tthis._stripesData = stripesData;\n\t\tthis._color = color;\n\t}\n\n\t/**\n\t * @param {BarData} barData\n\t */\n\tstatic copyAs(barData) {\n\t\treturn new BarData(\n\t\t\t{\n\t\t\t\tdisabled: barData.disabled,\n\t\t\t\thighlighted: barData.highlighted,\n\t\t\t\tcolor: barData.color\n\t\t\t},\n\t\t\tbarData.details,\n\t\t\tbarData.stripes\n\t\t);\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tget highlighted() {\n\t\treturn this._highlighted;\n\t}\n\tset highlighted(highlighted) {\n\t\tthis._highlighted = highlighted;\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget stripes() {\n\t\treturn this._stripesData;\n\t}\n\tgetStripe(index) {\n\t\treturn this._stripesData[index];\n\t}\n\tsetStripe(index, stripeData) {\n\t\tthis._stripesData[index] = stripeData;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\treturn {\n\t\t\t\tmin: 0,\n\t\t\t\tmax: this.stripes.reduce((sum, stripe) => sum + stripe.calculateMinMax(minMax).max, 0)\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.stripes.reduce((min, stripe) => Math.min(min, stripe.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.stripes.reduce((max, stripe) => Math.max(max, stripe.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (typeof this.details === 'undefined') {\n\t\t\treturn 0;\n\t\t}\n\t\tif (this.details === null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.details.getPrecision(precision);\n\t}\n\n}","export default class DetailsData {\n\n\tconstructor(\n\t\t{\n\t\t\tlabel,\n\t\t\tcolor,\n\t\t\ttooltips,\n\t\t\tdisabled\n\t\t}\n\t) {\n\t\tif (typeof label === 'undefined') throw \"label is required parameter\";\n\n\t\tthis._label = label;\n\t\tthis._color = color;\n\t\tthis._tooltips = tooltips;\n\t\tthis._disabled = disabled;\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\tstatic copyAs(detailsData) {\n\t\treturn new DetailsData(\n\t\t\t{\n\t\t\t\tlabel: detailsData.label,\n\t\t\t\tcolor: detailsData.color,\n\t\t\t\ttooltips: detailsData.tooltips,\n\t\t\t\tdisabled: detailsData.disabled\n\t\t\t}\n\t\t);\n\t}\n\n\tget label() {\n\t\treturn this._label;\n\t}\n\tset label(label) {\n\t\tthis._label = label;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n\tgetTooltip(index) {\n\t\treturn this._tooltips[index];\n\t}\n\tsetTooltip(index, tooltipData) {\n\t\tthis._tooltips[index] = tooltipData;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (!this.tooltips) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn this.tooltips.reduce((max, tooltip) => Math.max(max, tooltip.getPrecision()), 0);\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","export default class BarchartData {\n\n\tconstructor(\n\t\t{\n\t\t\tcolor\n\t\t},\n\t\tdetailsData,\n\t\tbarsData\n\t) {\n\t\tif (typeof barsData === 'undefined') throw \"barsData is required parameter\";\n\n\t\tthis._color = color;\n\t\tthis._detailsData = detailsData;\n\t\tthis._barsData = barsData;\n\t}\n\n\t/**\n\t * @param {BarchartData} barchartData\n\t */\n\tstatic copyAs(barchartData) {\n\t\treturn new BarchartData(\n\t\t\t{\n\t\t\t\tcolor: barchartData.color\n\t\t\t},\n\t\t\tbarchartData.details,\n\t\t\tbarchartData.bars\n\t\t);\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget bars() {\n\t\treturn this._barsData;\n\t}\n\tgetBar(index) {\n\t\treturn this._barsData[index];\n\t}\n\tsetBar(index, barData) {\n\t\tthis._barsData[index] = barData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\treturn {\n\t\t\t\tmin: 0,\n\t\t\t\tmax: this.bars.reduce((sum, bar) => sum + bar.calculateMinMax(minMax).max, 0)\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.bars.reduce((min, bar) => Math.min(min, bar.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.bars.reduce((max, bar) => Math.max(max, bar.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\treturn this.bars.reduce((max, bar) => Math.max(max, bar.getPrecision(precision)), 0)\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","import Observable from \"../../utils/Observable\";\nimport Barchart from \"./Barchart\";\nimport TooltipData from \"../data/TooltipData\";\nimport StripeData from \"../data/StripeData\";\nimport BarData from \"../data/BarData\";\nimport DetailsData from \"../data/DetailsData\";\nimport BarchartData from \"../data/BarchartData\";\n\nclass BarchartBackport {\n\n\tconstructor(\n\t\t{\n\t\t\twidth,\n\t\t\theight,\n\t\t\tlabelFontSize,\n\t\t\tvalueFontSize, // deprecated: use tooltipFontSize\n\t\t\ttooltipFontSize = valueFontSize,\n\t\t\ttooltipSymbol,\n\t\t\tactiveBarColor, // deprecated: use activeColors\n\t\t\tactiveBarColors = activeBarColor ? [activeBarColor] : undefined, // deprecated: use activeColors\n\t\t\tactiveColors = activeBarColors,\n\t\t\tinactiveBarColor, // deprecated: use stripeBackgroundColor\n\t\t\tstripeBackgroundColor = inactiveBarColor,\n\t\t\tminMax,\n\t\t\tdetailsVisible,\n\t\t\tdetailsHeight,\n\t\t\tdualValue,\n\t\t\tbarHeight,\n\t\t\tenableBarHover,\n\t\t\tenableBarToggle,\n\t\t\tformat\n\t\t}\n\t) {\n\t\tthis._observable = new Observable([]);\n\t\tthis._observable\n\t\t\t.add(\"barEnter\")\n\t\t\t.add(\"barLeave\")\n\t\t\t.add(\"barLeftEnter\")\n\t\t\t.add(\"barLeftLeave\")\n\t\t\t.add(\"barRightEnter\")\n\t\t\t.add(\"barRightLeave\")\n\t\t\t.add(\"barMiddleEnter\")\n\t\t\t.add(\"barMiddleLeave\")\n\t\t\t.add(\"barClick\")\n\t\t\t.add(\"barDisabled\");\n\n\t\t// deprecated: use barEnter and barLeave\n\t\tthis._observable\n\t\t\t.add(\"barOver\")\n\t\t\t.add(\"barOut\");\n\n\t\tthis._barchart = new Barchart({\n\t\t\twidth,\n\t\t\theight,\n\t\t\tlabelFontSize,\n\t\t\ttooltipFontSize,\n\t\t\ttooltipSymbol,\n\t\t\tactiveColors,\n\t\t\tstripeBackgroundColor,\n\t\t\tminMax,\n\t\t\tdetailsVisible,\n\t\t\tdetailsHeight,\n\t\t\tdualValue,\n\t\t\tbarHeight,\n\t\t\tenableBarHover,\n\t\t\tenableBarToggle,\n\t\t\tformat\n\t\t});\n\n\t\tthis._barchart.on(\"barEnter\", barIndex => {\n\t\t\tthis._observable.fire(\"barEnter\", barIndex);\n\t\t\tthis._observable.fire(\"barOver\", barIndex);\n\t\t});\n\n\t\tthis._barchart.on(\"barLeave\", barIndex => {\n\t\t\tthis._observable.fire(\"barLeave\", barIndex);\n\t\t\tthis._observable.fire(\"barOut\", barIndex);\n\t\t});\n\n\t\tthis._barchart.on(\"barLeftEnter\", barIndex => {\n\t\t\tthis._observable.fire(\"barLeftEnter\", barIndex);\n\t\t});\n\t\tthis._barchart.on(\"barLeftLeave\", barIndex => {\n\t\t\tthis._observable.fire(\"barLeftLeave\", barIndex);\n\t\t});\n\n\t\tthis._barchart.on(\"barMiddleEnter\", barIndex => {\n\t\t\tthis._observable.fire(\"barMiddleEnter\", barIndex);\n\t\t});\n\t\tthis._barchart.on(\"barMiddleLeave\", barIndex => {\n\t\t\tthis._observable.fire(\"barMiddleLeave\", barIndex);\n\t\t});\n\n\t\tthis._barchart.on(\"barRightEnter\", barIndex => {\n\t\t\tthis._observable.fire(\"barRightEnter\", barIndex);\n\t\t});\n\t\tthis._barchart.on(\"barRightLeave\", barIndex => {\n\t\t\tthis._observable.fire(\"barRightLeave\", barIndex);\n\t\t});\n\n\t\tthis._barchart.on(\"barClick\", barIndex => {\n\t\t\tthis._observable.fire(\"barClick\", barIndex);\n\t\t});\n\t\tthis._barchart.on(\"barDisabled\", barIndex => {\n\t\t\tthis._observable.fire(\"barDisabled\", barIndex);\n\t\t});\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._barchart.destroy();\n\t\treturn this;\n\t}\n\n\trender(selector, x = 0, y = 0) {\n\t\tthis._barchart.render(selector, x, y);\n\t\treturn this;\n\t}\n\n\tsetData(...series) {\n\t\tif (!this._barchart.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tconst bars = {};\n\n\t\tseries.forEach((serie) => {\n\t\t\tserie.forEach((data) => {\n\n\t\t\t\tif (typeof bars[data.label] === 'undefined') {\n\t\t\t\t\tbars[data.label] = {}\n\t\t\t\t\tbars[data.label].values = [];\n\t\t\t\t}\n\n\t\t\t\tbars[data.label].label = data.label;\n\t\t\t\tbars[data.label].disabled = bars[data.label].disabled || data.disabled;\n\t\t\t\tbars[data.label].highlighted = bars[data.label].highlighted || data.highlighted;\n\t\t\t\tbars[data.label].values.push({\n\t\t\t\t\tvalue: data.value,\n\t\t\t\t\tcolor: data.color,\n\t\t\t\t\ttooltip: data.tooltip\n\t\t\t\t});\n\n\t\t\t})\n\t\t});\n\n\t\tconst barsData = [];\n\n\t\tfor(const barLabel in bars) {\n\t\t\tconst bar = bars[barLabel];\n\n\t\t\tconst values = [];\n\t\t\tlet tooltips;\n\t\t\tfor(const index in bar.values) {\n\t\t\t\tconst value = bar.values[index];\n\n\t\t\t\tvalues.push(new StripeData({\n\t\t\t\t\tvalue: value.value,\n\t\t\t\t\tcolor: value.color\n\t\t\t\t}));\n\n\t\t\t\tif (typeof value.tooltip !== 'undefined') {\n\t\t\t\t\tif (typeof tooltips === 'undefined') {\n\t\t\t\t\t\ttooltips = [];\n\t\t\t\t\t}\n\t\t\t\t\ttooltips.push(new TooltipData({\n\t\t\t\t\t\ttext: value.tooltip,\n\t\t\t\t\t\tcolor: value.color\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbarsData.push(new BarData(\n\t\t\t\t{\n\t\t\t\t\tdisabled: bar.disabled,\n\t\t\t\t\thighlighted: bar.highlighted\n\t\t\t\t},\n\t\t\t\tnew DetailsData({\n\t\t\t\t\tlabel: barLabel,\n\t\t\t\t\ttooltips: tooltips\n\t\t\t\t}),\n\t\t\t\tvalues\n\t\t\t));\n\t\t}\n\n\t\tthis._barchart.setData(new BarchartData({}, null, barsData));\n\n\t\treturn this;\n\t}\n\n\n}\n\nexport default BarchartBackport;\n","\nimport Doughnut from \"./doughnut/Doughnut\";\nimport Histogram from \"./histogram/Histogram\";\nimport Line from \"./line/Line\";\n\nimport BarLegacy from \"./bar/Bar\";\n\nimport Barchart from \"./barchart/components/Barchart\";\n\nimport StripeData from \"./barchart/data/StripeData\";\nimport BarData from \"./barchart/data/BarData\";\nimport DetailsData from \"./barchart/data/DetailsData\";\nimport BarchartData from \"./barchart/data/BarchartData\";\nimport TooltipData from \"./barchart/data/TooltipData\";\nimport Stripe from \"./barchart/components/Stripe\";\nimport BarchartBackport from \"./barchart/components/BarchartBackport\";\n\nexport default {\n\tBar:BarLegacy,\n\n\tBarchart:Barchart,\n\tBarchartBackport:BarchartBackport,\n\tStripe:Stripe,\n\n\tBarchartData:BarchartData,\n\tBarData:BarData,\n\tDetailsData:DetailsData,\n\tStripeData:StripeData,\n\tTooltipData:TooltipData,\n\n    Doughnut:Doughnut,\n    Histogram:Histogram,\n    Line:Line\n}"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","OUTER_RADIUS","INNER_RADIUS","VALUE","ACTIVE_COLOR","INACTIVE_COLOR","BACKGROUND_COLOR","ANIMATION_DURATION","DoughnutRenderer","options","_options","_containerEl","_groupEl","_svgEl","_rendered","_observable","selector","ct","d3","width","node","offsetWidth","height","offsetHeight","value","_value","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","append","attr","style","g","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","on","fire","eventName","off","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","d","interpolateAngle","t","_this3","removeChild","destroy","getOptionValue","optionValue","defaultOptionValue","Doughnut","Defaults","renderTo","_doughnutRenderer","render","isRendered","update","WIDTH","HEIGHT","MARGIN","INACTIVE_BAR_COLOR","INACTIVE_BAR_OPACITY","OVER_SELECTION_COLOR","OVER_SELECTION_OPACITY","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","FONT_SIZE","DEFAULT_COLORS","HistogramData","data","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","histogramData","max","min","position","minMax","getMinMax","getValueRatio","valueRatio","constrainedValue","Math","round","numOfBarsPerBucket","forEach","bucket","step","volume","Array","isArray","gradientIndex","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","_updateLabelPosition","getBBox","offset","text","setLabelOffset","setHoverState","unsetHoverState","classed","xpos","x","positionToValue","_getLabelText","format","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","content","innerHTML","getComputedTextLength","maskPadding","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","selectAll","color","enter","getHandlePositionOffsets","handle1","handle2","label1Box","getLabelBox","label2Box","conflictDiff","posDiff1","posDiff2","xMax","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBars","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","_this","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","map","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_clear","_renderSelection","_handleClick","handles","slice","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","from","to","pos","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","colors","volumeIndex","selectionColor","inactiveBarColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","frames","transitions","abs","si","hi","bars","bar","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_xAxis","range","_yAxis","_prevData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","histogram","inactive","active","domain","getData","_renderXAxis","_renderDataBars","refresh","showSelectionLabels","hideSelectionLabels","y","v","floor","ceil","HistogramSelection","_selection","Object","assign","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","setSelection","LINE_COLOR","LINE_COLORS","LINE_OPACITY","FILL_COLOR","FILL_COLORS","FILL_OPACITY","LINE_WIDTH","DOT_SIZE","AXIS_COLOR","ZERO_LINE_COLOR","LineData","series","_series","concat","dataMap","getAllData","item","values","tooltips","tooltip","numParts","toString","split","TooltipRenderer","_lineData","_onMouseOut","xPos","bottomLabelWidth","filter","icon","lineColors","lineColor","join","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_getTooltipHTML","_tooltipTopLabel","labelLeft","_getLabelLeft","some","_tooltipLineCircle","circle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","getMergedData","getSeries","_hoverAreas","_onHoverAreaOver","lineWidth","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","lineData","_renderTooltip","LineRenderer","_tooltipRenderer","line","verticalSpacing","allData","_renderZeroLine","seriesIndex","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","fillColor","fillColors","area","y0","y1","_getGroupedData","fillOpacity","dotSize","path","group","Line","_lineRenderer","setData","getPrecision","BAR_HEIGHT","OVER_BAR_COLOR","ACTIVE_BAR_COLOR","ACTIVE_BAR_COLORS","ENABLE_BAR_TOGGLE","ENABLE_BAR_HOVER","LABEL_FONT_SIZE","VALUE_FONT_SIZE","MINMAX","BarData","highlighted","sums","BarRenderer","_barData","_maskIndex","MASK_INDEX","_clipPath","labelFontSize","barData","barHeight","reverse","observable","barGroup","enableBarHover","enableBarToggle","tooltipX","valueIndex","tooltipEl","reversedIndex","valueFontSize","activeBarColors","activeBarColor","barOffset","Bar","overBarColor","_barRenderer","barIndex","TOOLTIP_FONT_SIZE","TOOLTIP_SYMBOL","ACTIVE_COLORS","DETAILS_HIDDEN","DUAL_VALUE","FORMAT","BAR_DISABLED","STRIPE_HEIGHT","STRIPE_BACKGROUND_COLOR","TOOLTIP_SPACE","BAR_HIGHLIGHTED","CORNER_ROUNDED","Component","className","alignRight","alignBottom","_width","_height","_container","_className","_alignRight","_alignBottom","_data","_renderContainer","clickableArea","_render","clearData","_setData","_clearData","select","Tooltip","symbol","space","_fontSize","_symbol","_activeColor","_format","_space","container","includes","spec","precision","isNumber","tooltipText","tooltipWidth","Details","tooltipFontSize","tooltipSymbol","activeColors","_labelFontSize","_tooltipFontSize","_tooltipSymbol","_activeColors","_tooltips","updateTooltipsData","tooltipsData","previousTooltipX","_","undefined","tooltipReversed","tooltipData","Stripe","dualValue","topCornerRounded","bottomCornerRounded","_backgroundColor","_dualValue","_topCornerRounded","_bottomCornerRounded","clipPath","_renderProgress","_renderStripe","x1","x2","axis","xBase","_renderXBase","add","TooltipData","_color","_text","str","isNaN","isFinite","detailsHidden","detailsHeight","enableHover","enableToggle","stripeBackgroundColor","_detailsHidden","_detailsHeight","_enableHover","_enableToggle","_disabled","_stripeBackgroundColor","_details","_stripes","_hover","Hover","calculateMinMax","stripes","stripe","stripeData","details","Barchart","detailsVisible","_detailsVisible","_barHeight","_enableBarHover","_enableBarToggle","_bars","updateFunction","setDetailsData","setBarData","detailsData","_svgWrapper","barsContainer","topDetailsWidth","log","updateDetailsData","StripeData","leftValue","leftColor","rightValue","rightColor","_right","_left","dual","leftData","rightData","stripesData","_highlighted","_detailsData","_stripesData","sum","DetailsData","_label","BarchartData","barsData","_barsData","barchartData","BarchartBackport","_barchart","serie","barLabel","BarLegacy"],"mappings":"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"}